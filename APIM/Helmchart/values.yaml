# Default values for apimgr-ext-cass.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.


global:
   imagePullSecrets: []

   imagePullPolicy: "IfNotPresent"

   dockerRepository: "docker-registry.demo.axway.com/other-demo"
   imageTag: "7.7-20210530"

   updateStrategy: "RollingUpdate"

   domainName: ""

   # AZURE, OPENSHIFT, MINIKUBE
   platform: {}
   # If you store your license in your myValues.yaml, the corresponding Secret license will be created and referenced 
   # accordingly in the API Gateway PoDs. Alternatively, you can use your own secret and reference it via licenseSecretName.
   license: {}
      # FIPS=1
      # SalesForce Connector=1
      # ServiceNow Connector=1
      # analytics=1
      # ...
      # .....
      # ...
      # # SIGNATURE: 8eee280ede1a7fd94b91130c78da44f403f8bd9f927bc96bfd6a2a94839c049b
      # # SIGNATURE: 096e86bb928c5865c77596de3814f116b9b3f4923441ac0cb8e7189f9c0f5971

   # The necessary API gateway license is included as a Secret. If you use your own secret, you can specify the name of the 
   # secret here, which contains the license Base64 encoded. If you do not specify the name, license will be used as default.
   licenseSecretName: 

   createSecrets: true

   #Annotation

   initImageTag: "busybox:1.33"
   
   editor: "Axway"

##################################################################################################################################
#   A D M I N - N O D E M A N A G E R
##################################################################################################################################
anm:
   enabled: true
   replicas: 1
   image: "anm"
   containerPorts:
      anm: 8090
   service:
      type: "ClusterIP"
      loadBalancerIP: ""
      port: 8090
      nodePort: ""
      labels: {}
      annotations: {}
   ingress:
      enabled: true
      name: anm
      annotations: {}
         # kubernetes.io/ingress.class: azure/application-gateway
         # appgw.ingress.kubernetes.io/backend-protocol: https
         # cert-manager.io/cluster-issuer: letsencrypt-prod
         # cert-manager.io/acme-challenge-type: http01
         # appgw.ingress.kubernetes.io/ssl-redirect: "true"
         # appgw.ingress.kubernetes.io/connection-draining: "true"
         # appgw.ingress.kubernetes.io/connection-draining-timeout: "30"
      hosts: {}
         # - host: anm.domain.internal
         #  paths:
         #   - path: /
      tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local
   # https://docs.axway.com/bundle/axway-open-docs/page/docs/apim_installation/apigw_containers/container_env_variables/index.html#environment-variables-reference
   EMT_DEPLOYMENT_ENABLED: false
   EMT_TOPOLOGY_LOG_DEST: 1
   EMT_TOPOLOGY_LOG_DIR: "/opt/Axway/apigateway/logs"
   EMT_TOPOLOGY_LOG_ENABLED: false
   EMT_TOPOLOGY_LOG_INTERVAL: 60
   EMT_HEAP_SIZE_MB: 1024
   EMT_TRACE_LEVEL: "INFO"
   EMT_POLL_INTERVAL: 30
   EMT_TOPOLOGY_TTL: 500

   securityContext: {}

   podSecurityContext:
      runAsUser: 1000
      fsGroup: 1000
      
   nodeSelector: {}
   tolerations: []
   affinity: {}

   nameOverride: ""
   fullnameOverride: ""

   labels: {}

   podAnnotations: {}

   readinessProbe:
      httpGet:
         httpHeaders:
            - name: k8sprobe
              value: readiness.anm
         path: /login
         port: anm
         scheme: HTTPS
      initialDelaySeconds: 10
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1

   livenessProbe:
      httpGet:
         httpHeaders:
            - name: k8sprobe
              value: liveness.anm
         path: /login
         port: anm
         scheme: HTTPS
      initialDelaySeconds: 60
      periodSeconds: 60
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1

   updateStrategy: 
      rollingUpdate:
         maxSurge: 25%
         maxUnavailable: 25%
      type: RollingUpdate

   resources:
      requests:
         cpu: "100m"
         memory: "1536Mi"
      limits:
         cpu: "1000m"
         memory: "1536Mi"

   args: 
   - /opt/Axway/apigateway/posix/bin/start-emt-nodemanager

   #name: anm
   #buildTag: "20210330"
   #imageName: "apim-anm-7.7"
   #ingressName: "anm"
   #replicaCount: 1
   #pvcQuota: 1
   #trafficPort: 8090
   #trafficPortUI: 8091
   #logTraceToFile: "true"
   #logTraceJSONtoSTDOUT: "false"
   #emt_heap_size_mb: "1024"
   #emt_topology_log_enabled: "true"
   #emt_topology_ttl: 10
   #emt_trace_level: "INFO"
   #certInSecret: false

##################################################################################################################################
#   API MANAGER
##################################################################################################################################
apimgr:
   enabled: true

   nameOverride: "apimanager"

   replicas: 1
   image: "manager"
   containerPorts:
      manager: 8075

   service:
      type: "ClusterIP"
      loadBalancerIP: ""
      port: 8075
      nodePort: ""
      labels: {}
      annotations: {}

   EMT_DEPLOYMENT_ENABLED: false
   EMT_TOPOLOGY_LOG_DEST: 1
   EMT_TOPOLOGY_LOG_DIR: "/opt/Axway/apigateway/logs"
   EMT_TOPOLOGY_LOG_ENABLED: false
   EMT_TOPOLOGY_LOG_INTERVAL: 60
   EMT_HEAP_SIZE_MB: 1024
   EMT_TRACE_LEVEL: "INFO"
   EMT_POLL_INTERVAL: 30
   EMT_TOPOLOGY_TTL: 500

   jvm: |
      <ConfigurationFragment>
      <VMArg name="-Ddont.expect.100.continue=true"/>
      <VMArg name="-Dio.swagger.parser.util.RemoteUrl.trustAll=true"/>
      <VMArg name="-Dio.swagger.v3.parser.util.RemoteUrl.trustAll=true"/>
      </ConfigurationFragment>

   ingress:
      enabled: true
      name: manager
      annotations: {}
         # kubernetes.io/ingress.class: azure/application-gateway
         # appgw.ingress.kubernetes.io/backend-protocol: https
         # cert-manager.io/cluster-issuer: letsencrypt-prod
         # cert-manager.io/acme-challenge-type: http01
         # appgw.ingress.kubernetes.io/ssl-redirect: "true"
         # appgw.ingress.kubernetes.io/connection-draining: "true"
         # appgw.ingress.kubernetes.io/connection-draining-timeout: "30"
      hosts: {}
         # - host: anm.domain.internal
         #  paths:
         #   - path: /
      tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local

   podAnnotations: {}

   args:
   - /opt/Axway/apigateway/posix/bin/start-emt-instance

   securityContext: {}

   podSecurityContext:
      runAsUser: 1000
      fsGroup: 1000

   readinessProbe:
      httpGet:
         httpHeaders:
         - name: k8sprobe
           value: readiness.apimgr
         path: /healthcheck
         port: manager
         scheme: HTTPS
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1

   livenessProbe:
      httpGet:
         path: /healthcheck
         port: manager
         httpHeaders:
         - name: k8sprobe
           value: liveness.apimgr
         scheme: HTTPS
      initialDelaySeconds: 300
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1

   resources:
      requests:
         cpu: "100m"
         memory: "1536Mi"
      limits:
         cpu: "1000m"
         memory: "1536Mi"

   lifecycle:
      preStop:
         exec:
            command: ["sleep","10"]

   updateStrategy: 
      rollingUpdate:
         maxSurge: 25%
         maxUnavailable: 25%
      type: RollingUpdate


   #buildTag: "20210330"
   #imageName: "apim-gtw-7.7"
   #ingressName: "api-mgr"
   #replicaCount: 1
   #trafficPort: 8075
   #logTraceToFile: "true"
   #logTraceJSONtoSTDOUT: "false"
   #logOpenTrafficOutput: "stdout"
   #emt_heap_size_mb: "1024"
   #emt_topology_log_enabled: "true"
   #emt_topology_ttl: 10
   #emt_trace_level: "INFO"
   #certInSecret: false

##################################################################################################################################
#   API TRAFFIC
##################################################################################################################################
apitraffic:
   enabled: true
   replicas: 2
   image: "manager"
   nameOverride: "traffic"

   EMT_DEPLOYMENT_ENABLED: false
   EMT_TOPOLOGY_LOG_DEST: 1
   EMT_TOPOLOGY_LOG_DIR: "/opt/Axway/apigateway/logs"
   EMT_TOPOLOGY_LOG_ENABLED: false
   EMT_TOPOLOGY_LOG_INTERVAL: 60
   EMT_HEAP_SIZE_MB: 1024
   EMT_TRACE_LEVEL: "INFO"
   EMT_POLL_INTERVAL: 30
   EMT_TOPOLOGY_TTL: 500

   ingress:
      enabled: true
      name: api
      annotations: {}
         # kubernetes.io/ingress.class: azure/application-gateway
         # appgw.ingress.kubernetes.io/backend-protocol: https
         # cert-manager.io/cluster-issuer: letsencrypt-prod
         # cert-manager.io/acme-challenge-type: http01
         # appgw.ingress.kubernetes.io/ssl-redirect: "true"
         # appgw.ingress.kubernetes.io/connection-draining: "true"
         # appgw.ingress.kubernetes.io/connection-draining-timeout: "30"
      hosts: {}
         # - host: anm.domain.internal
         #  paths:
         #   - path: /
      tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local

   containerPorts:
      traffic: 8065
      plain: 8080
      tls: 8081
      oauth: 8089

   service:
      type: "ClusterIP"
      loadBalancerIP: ""
      port: 8065
      nodePort: ""
      labels: {}
      annotations: {}

   resources:
      requests:
         cpu: "200m"
         memory: "1536Mi"
      limits:
         cpu: "1000m"
         memory: "1536Mi"

   podSecurityContext:
      runAsUser: 1000
      fsGroup: 1000

   readinessProbe:
      httpGet:
         httpHeaders:
         - name: k8sprobe
           value: readiness.apimgr
         path: /healthcheck
         port: plain
         scheme: HTTP
      initialDelaySeconds: 20
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1

   livenessProbe:
      httpGet:
         path: /healthcheck
         port: plain
         httpHeaders:
         - name: k8sprobe
           value: liveness.apimgr
         scheme: HTTPS
      initialDelaySeconds: 300
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1

   updateStrategy: 
      rollingUpdate:
         maxSurge: 25%
         maxUnavailable: 25%
      type: RollingUpdate

   args:
   - /opt/Axway/apigateway/posix/bin/start-emt-instance

   lifecycle:
      preStop:
         exec:
            command: ["sleep","10"]

   filebeat:
      enabled: false
      image: docker.elastic.co/beats/filebeat
      imageTag: 7.12.1
      securityContext:
         runAsUser: 0
         privileged: false
      args: ["-e", "-E", "http.enabled=true"]
      resources:
         requests:
            cpu: "500m"
            memory: "150Mi"
         limits:
            cpu: "1000m"
            memory: "200Mi"
      readinessProbe:
         exec:
            command: [ "sh", "-c", "filebeat test output" ]
         initialDelaySeconds: 10
         periodSeconds: 10
         timeoutSeconds: 5
         failureThreshold: 3
         successThreshold: 1
      livenessProbe:
         exec:
            command: [ "sh", "-c", "curl --fail 127.0.0.1:5066" ]
         initialDelaySeconds: 10
         periodSeconds: 10
         timeoutSeconds: 5
         failureThreshold: 3
         successThreshold: 1


   #name: traffic
   #buildTag: "20210330"
   #imageName: "apim-gtw-7.7"
   #ingressName: "api"
   #portManager: 8065
   #portGateway: 8080
   #portGatewaySSL: 8081
   #replicaCount: 1
   #autoscaling:
   #   enable: false
   #   maxReplicas: 3
   #   averageUtilization: 70
   #logTraceToFile: "true"
   #logTraceJSONtoSTDOUT: "false"
   #logOpenTrafficOutput: "stdout"
   #emt_trace_level: "INFO"
   #emt_heap_size_mb: "1512"
   #emt_topology_log_enabled: "true"
   #emt_topology_ttl: 10
   share:
      secret: "azure-file"
      name: "gw-events"
      path: "/opt/Axway/apigateway/events"
   #   quota: 1
   #volumes:
   #   accessModes: ReadWriteOnce
   #certInSecret: false
   #portProbe: 8065
   #schemeProbe: "HTTPS"

pvcs:
   eventsVolumeClaim:
      accessModes: [ "ReadWriteOnce" ]
      resources:
         requests:
            storage: 10Gi
   opentrafficVolumeClaim:
      accessModes: [ "ReadWriteOnce" ]
      resources:
         requests:
            storage: 10Gi
   apigw-mysql-analytics:
      accessModes: [ "ReadWriteOnce" ]
      resources:
         requests:
            storage: 10Gi

##################################################################################################################################
#   CASSANDRA DATABASE
##################################################################################################################################
cassandra:
   enabled: true
   external: false
   dbUser:
      user: "cassandra"
      password: "changeme"
   cluster: 
      name: "cassandra"
      seedCount: 1
      numTokens: 256
      datacenter: dc1
      rack: rack1
      enableRPC: true
      endpointSnitch: SimpleSnitch
      clientEncryption: false
   containerPorts:
      intra: 7000
      tls: 7001
      jmx: 7199
      cql: 9042
      thrift: 9160
   service:
      type: ClusterIP
      port: 9042
      thriftPort: 9160
      metricsPort: 8080
      nodePorts:
         cql: ''
         thrift: ''
         metrics: ''
      annotations: {}

   persistence:
      enabled: true
      annotations:
      accessModes:
         - ReadWriteOnce
      size: 8Gi
      mountPath: /var/lib/cassandra/data

   podManagementPolicy: OrderedReady

   podAffinityPreset: ""

   podAntiAffinityPreset: soft

   nodeAffinityPreset:
      type: ""
      key: ""
      values: []

   nodeSelector: {}

   tolerations: []

   podSecurityContext:
      fsGroup: 1000

   resources:
      limits:
         cpu: "1000m"
         memory: 2Gi
      requests:
         cpu: "500m"
         memory: 1Gi

   lifecycle:
      preStop:
         exec:
            command: 
            - /bin/sh
            - -c
            - nodetool drain   

   updateStrategy: RollingUpdate
   
   buildTag: "2.2.19"
   registry: "cassandra"
   replicaCount: 1
   clusterName: "axway-apim-management"
   keyspace: "axway-apim-management"
   host1: "ip_host1"
   host2: "ip_host2"
   host3: "ip_host3"
   domain: ""
   consistency_level: "LOCAL_QUORUM"

metricsDB:
   METRICS_DB_URL: 
   METRICS_DB_USERNAME: 
   METRICS_DB_PASS: 
      valueFrom:
         secretKeyRef:
            name: apim-password

apiportal:
   enabled: false
   name: "api-portal"
   buildTag: "7.7-20210330"
   imageName: "apim-ptl"
   ingressName: "apiportal"
   trafficPort: 443
   scheme: HTTPS
   replicaCount: 1
   share:
      secret: "apiportal-secret-name"
      name: "apiportal-volume-rwm-name"
   certInSecret: false
   runAsUser: 1000

apiaga:
   enabled: false
   name: apiaga
   buildTag: "20210330"
   imageName: "apim-aga-7.7"
   ingressName: "analytics"
   replicaCount: 1
   trafficPort: 8040
   logTraceToFile: "true"
   logTraceJSONtoSTDOUT: "false"
   logOpenTrafficOutput: "stdout"
   emt_heap_size_mb: "1024"
   emt_topology_ttl: 10
   emt_trace_level: "INFO"
   certInSecret: false

##################################################################################################################################
#   ANALYTICS/METRICS DATABASE
##################################################################################################################################
mysqlanalytics:
   enabled: true

   persistence:
      enabled: true
      existingClaim: apigw-mysql-analytics

   auth: 
      rootPassword: "uPHW785qOJ"

   external: false

   nodeSelector: {}
   tolerations: []
   affinity: {}


   host: "externalUri"
   name: mysql-aga
   ssl: false
   imageName: "mysql"
   buildTag: "5.7.26"
   replicaCount: 1
   dbName: "analytics"
   adminUser: "report"
   adminPasswd: "changeme"
   rootPasswd: "changeme"
   quotaStorage: 10
   port: 3306

##################################################################################################################################
#   ANALYTICS/METRICS DATABASE
##################################################################################################################################
mysqlportal:
   enabled: false

   persistence:
      enabled: true
      existingClaim: apigw-mysql-portal

   external: true
   name: "mysql-portal"
   imageName: "mysql"
   buildTag: "5.7.26"
   replicaCount: 1
   dbName: "portal"
   adminUser: "portal"
   adminPasswd: "changeme"
   quotaStorage: 10
   port: 3306

oauth:
   enabled: false
   name: "oauth"
   ingressName: "oauth"
   trafficPort: 8089
   certInSecret: false

##################################################################################################################################
#   BASE - IMAGE for OpenShift only
##################################################################################################################################
base:
   useImagestream: false
   imageName: 
   imageTag: 