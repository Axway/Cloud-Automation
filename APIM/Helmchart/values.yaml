# Axway API-Management Helm-Chart values file.
# To use the helmet chart, create your own values.<customer>. and use it for installation as suggested in the readme.

global:
   # ImagePullSecrets made available to all Deployments/StateFullSets
   imagePullSecrets: []
   #  - name: myRegistryKeySecretName

   imagePullPolicy: "IfNotPresent"

   # Setup the docker repository used to pull images for anm, apimgr & traffic
   # Example: docker-registry.demo.axway.com/other-demo
   # You can override the docker-registry used for anm, api-manager & api-traffic
   dockerRepository: ""
   # Setup the image tag (e.g. 7.7-20210530)
   # You can override the image tag used for anm, api-manager & api-traffic
   imageTag: ""

   updateStrategy: "RollingUpdate"

   # The domain name used by allComponents as default
   domainName: ""

   # AZURE, OPENSHIFT, MINIKUBE
   platform: ""
   # If you provide your license in your myValues.yaml, a Secret axway-apim-license will be created and automatically mounted 
   # into the API Gateway PODs. 
   # Alternatively, you can use your own secret and reference it via existingLicenseSecret below. Make sure, your secret key ends with 
   # license.lic
   # Or you can build the image with the license included.
   # For example
   # license: |
      # FIPS=1
      # SalesForce Connector=1
      # ServiceNow Connector=1
      # analytics=1
      # ...
      # .....
      # ...
      # # SIGNATURE: 8eee280ede1a7fd94b91130c78da44f403f8bd9f927bc96bfd6a2a94839c049b
      # # SIGNATURE: 096e86bb928c5865c77596de3814f116b9b3f4923441ac0cb8e7189f9c0f5971
   license: {}

   # If you want to use your own secret, specify the name of the secret here, 
   # which contains the license Base64 encoded with key license
   # For example 
   # kubectl -n apim create secret generic axway-license --from-file=C:\temp\license.lic
   existingLicenseSecret: 
   # Sets the required flag ACCEPT_GENERAL_CONDITIONS for ANM, APIMGR and APITRAFFIC container
   acceptGeneralConditions: 

   # Setup the docker registry of the init image. By default busybox hosted on docker.io
   # initContainerImage: busybox:1.33

   # Set the name of the ingress class to any components.
   # It's possible to overwrite this value for each component.
   # No default value and optional if only one ingress controller is deployed.
   # Available only for Kubernetes version 1.18.x
   ingressClassName: ""

##################################################################################################################################
#   A D M I N - N O D E M A N A G E R
##################################################################################################################################
anm:
   enabled: true
   # Don't configure more than 1 replica as it would lead an inconsitent view of the current topology. 
   # See issue: https://github.com/Axway/Cloud-Automation/issues/38
   replicas: 1
   image: "anm"
   containerPorts:
      anm: 8090

   # Controls the service for ANM incl. belonging ingress resources
   service:
      type: "ClusterIP"
      loadBalancerIP: ""
      sessionAffinity: "None"
      port: 8090
      nodePort: ""
      labels: {}
      annotations: {}
   # General ingress settings.
   ingress:
      enabled: true
      # Set this value to overwrite the global value. 
      # Useful to choose an Ingress controller that is listening on a different IP
      ingressClassName: ""
      name: anm
      # Set the annotations according to your Ingress-Controller
      annotations: {}
         # kubernetes.io/ingress.class: azure/application-gateway
         # appgw.ingress.kubernetes.io/backend-protocol: https
         # cert-manager.io/cluster-issuer: letsencrypt-prod
         # cert-manager.io/acme-challenge-type: http01
         # appgw.ingress.kubernetes.io/ssl-redirect: "true"
         # appgw.ingress.kubernetes.io/connection-draining: "true"
         # appgw.ingress.kubernetes.io/connection-draining-timeout: "30"
      hosts: []
         # - host: anm.domain.internal
         #  paths:
         #   - path: /
      tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local

   # Configuration is based on environment variables as desribed here:
   # https://docs.axway.com/bundle/axway-open-docs/page/docs/apim_installation/apigw_containers/container_env_variables/index.html#environment-variables-reference
   config: {}
      # emtTopologyTtl: 120
      # emtDeploymentEnabled: false
      # emtTopologyLogDest: 1
      # emtTopologyLogDir: "/opt/Axway/apigateway/logs"
      # emtTopologyLogEnabled: false
      # emtTopologyLogInterval: 60
      # emtHeapSize: 1024
      # emtTraceLevel: INFO
      # emtParentHost: "anm"

   # This creates the volume merge-dir, which is always mounted to /merge to provide policy configuration and API-Gateway configuration to the container. 
   # By default, an empty-dir is used. For example, this can be used to obtain the necessary files through an extraInitContainer before the ANM POD starts.
   # See the provided examples.
   # If you want to use a PV or a ConfigMap, then you can configure it here accordingly. 
   # For more details please see: https://docs.axway.com/bundle/axway-open-docs/page/docs/apim_howto_guides/configuring_apigw_container/index.html
   mergeDirVolume:
   #   configMap:
   #     name: mergedir-config

   # Allows you to add any environment variables
   extraEnvs: []
   # - name: MY_ENVIRONMENT_VAR
   #   value: the_value_goes_here

   securityContext: {}

   # Allows you to add any config files
   extraVolumes: []
   # - name: axway-apigateway-admin-users
   #   secret:
   #     secretName: axway-apigateway-admin-users
   # - name: extras
   #   emptyDir: {}
   extraVolumeMounts: []
   # - name: axway-apigateway-admin-users
   #   mountPath: mountPath: /opt/Axway/apigateway/conf/adminUsers.json
   #   subPath: adminUsers.json
   # - name: extras
   #   mountPath: /usr/share/extras
   #   readOnly: true

   # A list of secrets and their paths to mount inside the pod
   # This is useful for mounting certificates for security other sensitive values
   secretMounts: []
   #  - name: some-secret-stuff
   #    secretName: some-secret-stuff
   #    path: /opt/Axway/apigateway/conf/some/secret

   # Defines where to mount required standard volumes such as events, opentraffic, etc. into the container
   volumeMountsPaths:
      # Where to mount events (defaults to /opt/Axway/apigateway/events)
      events: ""

   podSecurityContext:
      runAsUser: 1000
      fsGroup: 1000
      
   nodeSelector: {}
   tolerations: []
   affinity: {}
   topologySpreadConstraints: {}

   nameOverride: ""

   labels: {}

   podAnnotations: {}

   readinessProbe:
      httpGet:
         httpHeaders:
            - name: k8sprobe
              value: readiness.anm
         path: /login
         port: anm
         scheme: HTTPS
      initialDelaySeconds: 30
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1

   livenessProbe:
      httpGet:
         httpHeaders:
            - name: k8sprobe
              value: liveness.anm
         path: /login
         port: anm
         scheme: HTTPS
      initialDelaySeconds: 60
      periodSeconds: 60
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1

   updateStrategy: 
      rollingUpdate:
         maxSurge: 25%
         maxUnavailable: 25%
      type: RollingUpdate

   resources:
      requests:
         cpu: "100m"
         memory: "500Mi"
      limits:
         cpu: "500m"
         memory: "1Gi"

   # Resources for all Admin-Node-Manager Init-Containers
   initResources: {}
   #   requests:
   #      cpu: "25m"
   #      memory: "80Mi"
   #   limits:
   #      cpu: "25m"
   #      memory: "80Mi"

   args: 
   - /opt/Axway/apigateway/posix/bin/start-emt-nodemanager

   # Configure JVM settings
   jvm: 
      # Set to false if you prefer to include (bake in) your jvm.xml using the mergeDir option
      enabled: true
      config: |
         <ConfigurationFragment>
            <VMArg name="-Ddont.expect.100.continue=true"/>
         </ConfigurationFragment>

   # Enable envSettings.props. 
   # No changes to do by default
   envSettings:
      enabled: false
      #If not set, default value is the listener value service.port.
      PortTraffic: ""
      portSampleServices: ""
      # the timeout for web manager user sessions in seconds
      # Default value is 12 hours
      webmanagerSessionTimeout: ""
      # the idle timout for web manager user session, 30 minutes
      # number of seconds of inactivity for session to be invalidated
      webmanagerSessionIdleTimeout: ""
      # Add custom config at the end of this file.
      extraConfig: []
         # An example of how you might bind a reference to a host-specific certificate to a given deployment. The
         # SSL X509 Certificate in the 'SSL Interface' configuration item can then reference it using the binding
         # variable '${env.serverCertificate}'
         #env.serverCertificate=${system.prefix.cert}CN=MYHOST

##################################################################################################################################
#   API MANAGER
##################################################################################################################################
apimgr:
   enabled: true
   # For API-Manager it is recommended to have only 1 replica
   # See issue: https://github.com/Axway/Cloud-Automation/issues/39
   replicas: 1
   nameOverride: ""
   image: "manager"
   imageTag: ""
   containerPorts:
      manager: 8075

   service:
      type: "ClusterIP"
      loadBalancerIP: ""
      # sessionAffinity: "None"
      labels: {}
      annotations: {}
      ports:
      - name: manager
        port: 8075
        targetPort: 8075
        nodePort: ""
        ingress: 
         enabled: true
         host: manager

   # Configuration is based on environment variables as desribed here:
   # https://docs.axway.com/bundle/axway-open-docs/page/docs/apim_installation/apigw_containers/container_env_variables/index.html#environment-variables-reference
   config: {}
      # Comma separated list of hosts:port
      # emtAnmHosts: 
      # emtPollInterval: 30
      # emtDeploymentEnabled: false
      # emtHeapSize: 1024
      # emtTraceLevel: INFO
      # emtParentHost: "api-manager"

   # This creates the volume merge-dir, which is always mounted to /merge to provide policy configuration and API-Gateway configuration to the container. 
   # By default, an empty-dir is used. For example, this can be used to obtain the necessary files through an extraInitContainer before the API-Manager POD starts.
   # See the provided examples.
   # If you want to use a PV or a ConfigMap, then you can configure it here accordingly. 
   # For more details please see: https://docs.axway.com/bundle/axway-open-docs/page/docs/apim_howto_guides/configuring_apigw_container/index.html
   mergeDirVolume:
   #   configMap:
   #     name: mergedir-config

   # Allows you to add any environment variables
   extraEnvs: []
   # - name: MY_ENVIRONMENT_VAR
   #   value: the_value_goes_here

   # Defines where to mount required standard volumes such as events, opentraffic, etc. into the container
   volumeMountsPaths:
      # Where to mount events (defaults to /opt/Axway/apigateway/events)
      events: ""
      # Where to mount audit (defaults to /opt/Axway/apigateway/groups/emt-group/emt-service/logs)
      audit: ""

   # Allows you to add any config files
   extraVolumes: []
   # - name: extras
   #   emptyDir: {}
   extraVolumeMounts: []
   # - name: extras
   #   mountPath: /usr/share/extras
   #   readOnly: true

   # A list of secrets and their paths to mount inside the pod
   # This is useful for mounting certificates for security other sensitive values
   secretMounts: []
   #  - name: some-secret-stuff
   #    secretName: some-secret-stuff
   #    path: /opt/Axway/apigateway/conf/some/secret

   ingress:
      enabled: true
      # Set this value to overwrite the global value. 
      # Useful to choose an Ingress controller that is listening on a differnte IP
      ingressClassName: ""
      annotations: {}
         # kubernetes.io/ingress.class: azure/application-gateway
         # appgw.ingress.kubernetes.io/backend-protocol: https
         # cert-manager.io/cluster-issuer: letsencrypt-prod
         # cert-manager.io/acme-challenge-type: http01
         # appgw.ingress.kubernetes.io/ssl-redirect: "true"
         # appgw.ingress.kubernetes.io/connection-draining: "true"
         # appgw.ingress.kubernetes.io/connection-draining-timeout: "30"
      tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local

   podAnnotations: {}

   args:
   - /opt/Axway/apigateway/posix/bin/start-emt-instance

   securityContext: {}

   podSecurityContext:
      runAsUser: 1000
      fsGroup: 1000

   nodeSelector: {}
   tolerations: []
   affinity: {}
   topologySpreadConstraints: {}

   readinessProbe:
      httpGet:
         httpHeaders:
         - name: k8sprobe
           value: readiness.apimgr
         path: /
         port: manager
         scheme: HTTPS
      initialDelaySeconds: 60
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1

   livenessProbe:
      httpGet:
         path: /
         port: manager
         httpHeaders:
         - name: k8sprobe
           value: liveness.apimgr
         scheme: HTTPS
      initialDelaySeconds: 300
      periodSeconds: 60
      timeoutSeconds: 15
      failureThreshold: 3
      successThreshold: 1

   resources:
      requests:
         cpu: "200m"
         memory: "750Mi"
      limits:
         cpu: "500m"
         memory: "1Gi"

   # Resources for all API-Manager Init-Containers
   initResources: {}
   #   requests:
   #      cpu: "25m"
   #      memory: "80Mi"
   #   limits:
   #      cpu: "25m"
   #      memory: "80Mi"

   lifecycle:
      preStop:
         exec:
            command: ["sleep","10"]

   updateStrategy: 
      rollingUpdate:
         maxSurge: 25%
         maxUnavailable: 25%
      type: RollingUpdate

   # Configure JVM settings
   jvm: 
      # Set to false if you prefer to include (bake in) your jvm.xml using the mergeDir option
      enabled: true
      config: |
         <ConfigurationFragment>
            <VMArg name="-DCASSANDRA_PROTOCOL_VERSION=4" />
            <VMArg name="-Dio.swagger.parser.util.RemoteUrl.trustAll=true"/>
            <VMArg name="-Dio.swagger.v3.parser.util.RemoteUrl.trustAll=true"/>
         </ConfigurationFragment>

   # Enable envSettings.props. 
   # No changes to do by default
   # Custom value is on apitraffic.envSettings section
   envSettings:
      enabled: false

##################################################################################################################################
#   API TRAFFIC
##################################################################################################################################
apitraffic:
   enabled: true
   replicas: 2
   image: "manager"
   imageTag: ""
   nameOverride: ""

   # Allows you to add any environment variables
   extraEnvs: []
   # - name: MY_ENVIRONMENT_VAR
   #   value: the_value_goes_here
   
   # Ports to be exposed by the API-Traffic PODs
   containerPorts:
      traffic: 8065
      plain: 8080
      tls: 8081
      oauth: 8089
      mngt: 8085
   
   # Service and Ingress configuration for the API-Traffic PoD
   service:
      type: "ClusterIP"
      # sessionAffinity: "ClientIP"
      loadBalancerIP: ""
      labels: {}
      annotations: {}
      ports:
      - name: traffic
        port: 8065
        targetPort: 8065
        nodePort: ""
        ingress: 
          enabled: true
          host: traffic
      - name: oauth
        port: 8089
        targetPort: 8089
        nodePort: ""
        ingress: 
          enabled: false
          host: oauth
      - name: tls
        port: 8081
        targetPort: 8081
        nodePort: ""
        ingress: 
          enabled: false
          host: tls
      - name: plain
        port: 8080
        targetPort: 8080
        nodePort: ""
        # Ingress is currently not supported for HTTP-Connections - Would required another Ingress with additional annotations
        ingress: 
          enabled: false
          host: plain

   # Configuration is based on environment variables as desribed here:
   # https://docs.axway.com/bundle/axway-open-docs/page/docs/apim_installation/apigw_containers/container_env_variables/index.html#environment-variables-reference
   config: {}
      # Comma separated list of hosts:port
      # emtAnmHosts: 
      # emtPollInterval: 30
      # emtDeploymentEnabled: false
      # emtHeapSize: 1024
      # emtTraceLevel: INFO
      # emtParentHost: "api-gateway"

   # This creates the volume merge-dir, which is always mounted to /merge to provide policy configuration and API-Gateway configuration to the container. 
   # By default, an empty-dir is used. For example, this can be used to obtain the necessary files through an extraInitContainer before the Traffic POD starts.
   # See the provided examples.
   # If you want to use a PV or a ConfigMap, then you can configure it here accordingly. 
   # For more details please see: https://docs.axway.com/bundle/axway-open-docs/page/docs/apim_howto_guides/configuring_apigw_container/index.html
   mergeDirVolume: 
   #   configMap:
   #     name: mergedir-config

   ingress:
      enabled: true
      # Please note: Only basic ingress settings are configured here. 
      # The individual ingress resources are configured for the individual service ports. 
      # See for example: service.ports.oauth.ingress....
      # Set this value to overwrite the global value. 
      # Useful to choose an Ingress controller that is listening on a different IP
      ingressClassName: ""
      annotations: {}
         # kubernetes.io/ingress.class: azure/application-gateway
         # appgw.ingress.kubernetes.io/backend-protocol: https
         # cert-manager.io/cluster-issuer: letsencrypt-prod
         # cert-manager.io/acme-challenge-type: http01
         # appgw.ingress.kubernetes.io/ssl-redirect: "true"
         # appgw.ingress.kubernetes.io/connection-draining: "true"
         # appgw.ingress.kubernetes.io/connection-draining-timeout: "30"
      tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local
      # 

   # Defines where to mount required standard volumes such as events, opentraffic, etc. into the container
   volumeMountsPaths:
      # events mount location (defaults to /opt/Axway/apigateway/events)
      events: ""
      # opentraffic mount location (defaults to /opt/Axway/apigateway/logs/opentraffic)
      opentraffic: ""

   # Allows you to add any config files
   extraVolumes: []
   # - name: extras
   #   emptyDir: {}
   extraVolumeMounts: []
   # - name: extras
   #   mountPath: /usr/share/extras
   #   readOnly: true

   # A list of secrets and their paths to mount inside the pod
   # This is useful for mounting certificates for security other sensitive values
   secretMounts: []
   #  - name: some-secret-stuff
   #    secretName: some-secret-stuff
   #    path: /opt/Axway/apigateway/conf/some/secret

   resources:
      requests:
         cpu: "200m"
         memory: "1536Mi"
      limits:
         cpu: "1000m"
         memory: "1536Mi"

   # Resources for all API-Traffic (API-Gateway) Init-Containers
   initResources: {}
   #   requests:
   #      cpu: "25m"
   #      memory: "80Mi"
   #   limits:
   #      cpu: "25m"
   #      memory: "80Mi"

   affinity: 
      # By default this will make sure two API-Gateway pods don't end up on the same worker node
      # podAntiAffinity:
      #    # preferredDuringSchedulingIgnoredDuringExecution:
      #    requiredDuringSchedulingIgnoredDuringExecution:
      #    - labelSelector:
      #        matchExpressions:
      #        - key: app.kubernetes.io/name
      #          operator: In
      #          values:
      #          - traffic
      #      topologyKey: "kubernetes.io/hostname"
   
   topologySpreadConstraints: 
      # Avoid scheduling of API-Gateways in the same availability zone
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app.kubernetes.io/name: traffic
      # Avoid scheduling of API-Gateways on the same node
      - maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
           matchLabels:
            app.kubernetes.io/name: traffic

   nodeSelector: {}
   tolerations: []

   podSecurityContext:
      runAsUser: 1000
      fsGroup: 1000

   readinessProbe:
      httpGet:
         httpHeaders:
         - name: k8sprobe
           value: readiness.apitraffic
         path: /healthcheck
         port: plain
         scheme: HTTP
      initialDelaySeconds: 40
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1

   livenessProbe:
      httpGet:
         path: /healthcheck
         port: plain
         httpHeaders:
         - name: k8sprobe
           value: liveness.apitraffic
         scheme: HTTP
      initialDelaySeconds: 300
      periodSeconds: 30
      timeoutSeconds: 15
      failureThreshold: 3
      successThreshold: 1

   updateStrategy: 
      rollingUpdate:
         maxSurge: 25%
         maxUnavailable: 25%
      type: RollingUpdate

   args:
   - /opt/Axway/apigateway/posix/bin/start-emt-instance

   lifecycle:
      preStop:
         exec:
            command: ["sleep","10"]

   extraContainers: []
   # - name: do-something
   #   image: busybox
   #   command: ['do', 'something']

   # Configure JVM settings
   jvm: 
      # Set to false if you prefer to include (bake in) your jvm.xml using the mergeDir option
      enabled: true
      config: |
         <ConfigurationFragment>
            <VMArg name="-DCASSANDRA_PROTOCOL_VERSION=4" />
            <VMArg name="-Dio.swagger.parser.util.RemoteUrl.trustAll=true"/>
            <VMArg name="-Dio.swagger.v3.parser.util.RemoteUrl.trustAll=true"/>
         </ConfigurationFragment>

   # Configure pod autoscaling
   # Min replicas uses value apitraffic.replicas if not set.
   # Default trigger is CPU utilization.
   autoscaling:
      enabled: false
      #minReplicas: 3
      maxReplicas: 10
      targetCPUUtilizationPercentage: 90
      # targetMemoryUtilizationPercentage: 80

   # Enable envSettings.props. 
   # No changes to do by default
   envSettings:
      enabled: false
      # The hostname of the OAuth Server 
      # Defaults to localhost
      oauthServer: ""
      # The hostname of the OAuth Client 
      # Defaults to localhost
      oauthClient: ""
      # the default port which OAuth 2.0 Client Services listen on for traffic
      # Default value is 8088
      oauthClientPort: ""
      # the default AMA broker port
      # Default value is 61616
      brokerPort: ""
      # Add additional lines at the end of the envSettings
      extraConfig: []

##################################################################################################################################
#   API-Portal
##################################################################################################################################
apiportal:
   enabled: true
   replicas: 1
   image: "my-api-portal-image"
   imageTag: ""
   # Option to overwrite the globals.dockerRepository
   dockerRepository: ""
   containerPorts:
      apiportal: 443

   # Controls the service for the API-Portal
   service:
      type: "ClusterIP"
      loadBalancerIP: ""
      # sessionAffinity: "None"
      port: 443
      nodePort: ""
      labels: {}
      annotations: {}

   config: 
      # Enable if you would like to pre-configure the API-Manager service in API-Portal
      master: {}
         # name: "Master"
         # host: "my-api-manager-host"
         # port: "8082"
      ssl:
         # If you disable SSL for the API-Portal, please make sure to adjust the probes accordingly to use HTTP.
         enabled: true
         generateCertificates: true
         # Use an existing secret object for the required certificates. 
         # Certificate and Key must be stored with keys: apiportal.crt and apiportal.key: 
         existingSecret: ""
      tryIt:
         # enabledGet: true
         # enabledPost: true
         # enabledPut: true
         # enabledDelete: true
         # enabledPatch: true
         # enabledHead: true
         # enabledOptions: false
      redirectAfterLogin:
         # url: "/home"
      informationSource:
         # name: "summary" # Must be summary or description
      monitoringRange:
         # value: "2" # is an integer, which range is 2 to 6
      sessionTimeout:
         # timehoutHours: "24"
      clamAv:
         # host: ""
         # port: ""
      loginProtection: 
         # attemptsBeforeLock: "3"
         # attemptsBeforeRecapcha: "3"
         # lockDurationSec: "600"
         # lockIp: ""
      sso:
         # path: ""
         # entityId: ""
         # whitelist: ""
      whitelist:
         # enabled: true
         # oauthWhitelist: ""
         # apiWhitelist: ""
   
   redis:
      enabled: false
      internal: false
      host: "apiportal-redis-headless"
      port: "6379"
      cacheTimeout: "600"

   # Allows you to add any environment variables
   extraEnvs: []
   # - name: MY_ENVIRONMENT_VAR
   #   value: the_value_goes_here

   # General ingress settings.
   ingress:
      enabled: true
      name: apiportal
      # Set this value to overwrite the global value. 
      # Useful to choose an Ingress controller that is listening on a different IP
      ingressClassName: ""
      # Set the annotations according to your Ingress-Controller
      annotations: {}
         # kubernetes.io/ingress.class: azure/application-gateway
         # appgw.ingress.kubernetes.io/backend-protocol: https
         # cert-manager.io/cluster-issuer: letsencrypt-prod
         # cert-manager.io/acme-challenge-type: http01
         # appgw.ingress.kubernetes.io/ssl-redirect: "true"
         # appgw.ingress.kubernetes.io/connection-draining: "true"
         # appgw.ingress.kubernetes.io/connection-draining-timeout: "30"
      hosts: {}
         # - host: anm.domain.internal
         #  paths:
         #   - path: /
      tls: []
      #  - secretName: chart-example-tls
      #    hosts:
      #      - chart-example.local

   securityContext: {}

   # If enabled required PVCs for the API-Portal are created
   persistence: 
      enabled: true

   # Allows you to add any config files
   extraVolumes: []
   # - name: extras
   #   emptyDir: {}
   extraVolumeMounts: []
   # - name: extras
   #   mountPath: /usr/share/extras
   #   readOnly: true

   # A list of secrets and their paths to mount inside the pod
   # This is useful for mounting certificates for security other sensitive values
   secretMounts: []
   #  - name: some-secret-stuff
   #    secretName: some-secret-stuff
   #    path: /opt/Axway/apigateway/conf/some/secret

   # 1048 is the Apache user, which is required during installation
   podSecurityContext:
      runAsUser: 1048
      fsGroup: 1048
      
   nodeSelector: {}
   tolerations: []
   affinity: {}
   topologySpreadConstraints: {}

   nameOverride: ""

   labels: {}

   podAnnotations: {}

   readinessProbe:
      httpGet:
         httpHeaders:
            - name: k8sprobe
              value: readiness.apiportal
         path: /
         port: apiportal
         scheme: HTTPS
      initialDelaySeconds: 10
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1

   livenessProbe:
      httpGet:
         httpHeaders:
            - name: k8sprobe
              value: liveness.apiportal
         path: /
         port: apiportal
         scheme: HTTPS
      initialDelaySeconds: 60
      periodSeconds: 60
      timeoutSeconds: 5
      failureThreshold: 3
      successThreshold: 1

   updateStrategy: 
      rollingUpdate:
         maxSurge: 25%
         maxUnavailable: 25%
      type: RollingUpdate

   resources:
      requests:
         cpu: "100m"
         memory: "500Mi"
      limits:
         cpu: "500m"
         memory: "1000Mi"

   # Resources for all API-Portal Init-Containers
   initResources: {}
   #   requests:
   #      cpu: "25m"
   #      memory: "80Mi"
   #   limits:
   #      cpu: "25m"
   #      memory: "80Mi"

   args: []
   # - /do/some/other/stuff

   command: []
   # e.g. a do nothing command
   # command: [ "sh", "-c", "tail -f /dev/null" ]

   extraContainers: []
   # - name: do-something
   #   image: busybox
   #   command: ['do', 'something']

##################################################################################################################################
#   AMPLIFY AGENTS
##################################################################################################################################

agents:
   dockerRepository: "axway.jfrog.io/ampc-public-docker-release/agent"
   # You may use an existing secret that contains all required secure information with the following keys:
   # private_key.pem - They private key used for the Amplify-Central communication
   # public_key.pem - They public key used for the Amplify-Central communication
   # apimgr-auth-password - Password used to authenticate with the API-Manager
   # If set, this secret is automatically mounted
   existingSecret: 
   
   central:
      # The client identifier associated to the Service Account created in Amplify Central. 
      # Locate this at Amplify Central > Access > Service Accounts > client Id.
      clientId: 
      # You may provide the private-key in your local values
      privateKey: [] # |
         # -----BEGIN PRIVATE KEY-----
         # MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCy6I5t5R0qKHWR
         # UN7Cgzz2raYhdZzQKWktVRvNnAVaJKrmK981nNIWqB8enooRTDVFEp7XazAZGDVN
         # ....
      # You may provide the public-key in your local values
      publicKey: [] # |
         # -----BEGIN PUBLIC KEY-----
         # MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAsuiObeUdKih1kVDewoM8
         # 9q2mIXWc0ClpLVUbzZwFWiSq5ivfNZzSFqgfHp6KEUw1RRKe12swGRg1TWr5DBs/
         # ....
      # The Organization ID from Amplify Central. Locate this at Platform > User > Organization
      organizationId: 
      # Name of the Amplify Central environment where API will be hosted.
      environment: 
      # Defaults to /opt/keys/private_key.pem which matches to the mounted secret
      privateKeyLocation: 
      # Defaults to /opt/keys/public_key.pem which matches to the mounted secret
      publicKeyLocation: 
      # Controls the Amplify central region, which must be either US or EU
      deployment: "US"
      # The URL to the Amplify Central instance being used for Agents 
      url: ""
      # The URL for the proxy for Amplify Central <http://username:password@hostname:port>. If empty, no proxy is defined.
      proxyUrl: ""
      # Set to assign an owner of all API resources in the CENTRAL_ENVRIONMENT to that team. 
      # When blank (default), the agent will attempt to match API Manager organizations to existing teams. 
      # When no match is found, the API resources will not be assigned an owner. 
      # Catalog items will be assigned to the same team, or default team when blank.
      team: ""
      # Method to send endpoints back to Central.
      # publishToEnvironment = API Service
      # publishToEnvironmentAndCatalog = API Service and Catalog asset)
      mode: "publishToEnvironmentAndCatalog"
      # Set to false to turn off the Agent job that checks if the running agent is the latest available (default: true).
      versionChecker: "true"

   apimanager: 
      username: "apiadmin"
      password: 
      port:
      host:
      insecureSSL: "false"
   # Required connection for the ANM
   apigateway:
      username: "admin"
      password: 
      # The ANM host. (defaults to the ANM-Service name)
      host:
      # The ANM port. (defaults to 8090)
      port:
      # The uri (without a leading /) for the internal healthcheck (defaults to login)
      healthcheckUri: 
      # The protocol for the internal healthcheck (defaults to https)
      healthcheckProtocol: 
      # The port used for the healthcheck (default to 8090)
      healthcheckPort: 

   # --------------------------------------------
   # ------------ Discovery agent ---------------
   # --------------------------------------------
   discovery:
      enabled: false
      # The number of replicas for the discovery agent (very unlikely more than 1 is required)
      replicas: 1
      image: "v7-discovery-agent"
      imageTag: "1.1.11"
      # command: [ "sh", "-c", "tail -f /dev/null" ]

      config: 
         # The agent name of this agent on Amplify Central. The agent must have been configed on Central before
         agentName: 
         # Possible levels info, debug, warn, trace and error
         logLevel: info
         # The output for the log lines (stdout, file, both). When set to both for the Traceability Agent, only the file output will appear.
         logOutput: stdout
         # The path (relative or absolute) to save logs files, if output type file or both.
         logFilePath: logs
         # When creating a subscription on Amplify Central, setting this value to true will enable a selection in the App name 
         # dropdown for ‘Create an application.’ This allows the user to either select from an existing API Manager application, or to create a 
         # new application in API Manager. The new application in API Manager will be given the name of the subscription ID from Amplify Central. 
         # A value of false will cause ‘Create an application’ to not be shown in the dropdown. (default value: true).
         allowApplicationAutoCreation: 
         # The mode for approving subscriptions on Amplify Central (manual, auto, webhook; default = manual).
         subscriptionsApprovalMode: 
         # The url for a subscription approval webhook (if any). CENTRAL_SUBSCRIPTIONS_APPROVAL_MODE must be set to “webhook” for webhooks to be invoked.
         subscriptionsNotificationsWebhookUrl: 
         # The headers to pass to the subscription approval webhook (if any). For example, “Header=contentType,Value=application/json”.
         subscriptionsNotificationsWebhookHeaders: 
         # The authentication secret to pass to the subscription approval webhook (if any).
         subscriptionsNotificationsWebhookAuthSecret: 
         # The url for a subscription approval webhook (if any). CENTRAL_SUBSCRIPTIONS_APPROVAL_MODE must be set to “webhook” for webhooks to be invoked.
         subscriptionsApprovalWebhookUrl:
         # The headers to pass to the subscription approval webhook (if any). For example, “Header=contentType,Value=application/json”.
         subscriptionsApprovalWebhookHeaders:
         # The authentication secret to pass to the subscription approval webhook (if any).
         subscriptionsApprovalWebhookAuthSecret: 
         # The SMTP server that will send email notifications.
         subscriptionsNotificationsSmtpHost: 
         # The SMTP port to communicate to the SMTP server over.
         subscriptionsNotificationsSmtpPort:
         # The authentication type based on the email server. You may have to refer to the email server properties and specifications. This value defaults to NONE.
         subscriptionsNotificationsSmtpAuthType:
         # The username used to authenticate to the SMTP server, if necessary.
         subscriptionsNotificationsSmtpUsername:
         # The password used to authenticate to the SMTP server, if necessary.
         subscriptionsNotificationsSmtpPassword: 
         # The email address that will be listed in the from field.
         subscriptionsNotificationsSmtpFromAddress: 
         # The subject of email sent for Subscribe events.
         subscriptionsNotificationsSmtpSubscribeSubject: 
         # The body of the email for Subscribe events.
         subscriptionsNotificationsSmtpSubscribeBody:
         # The body of the email for Subscribe events when the API is secured using an OAUTH token.
         subscriptionsNotificationsSmtpSubscribeOAuth: 
         # The body of the email for Subscribe events when the API is secured using an APIKEY.
         subscriptionsNotificationsSmtpSubscribeAPIKeys:
         # The subject of email sent for Unsubscribe events.
         subscriptionsNotificationsSmtpUnsubscribeSubject: 
         # The body of the email for Unsubscribe events.
         subscriptionsNotificationsSmtpUnsubscribeBody:
         # The subject of email sent for Failed to Subscribe events.
         subscriptionsNotificationsSmtpSubscribeFailedSubject:
         # The body of the email for Failed to Subscribe events.
         subscriptionsNotificationsSmtpSubscribeFailedBody: 
         # The subject of email sent for Failed to Unsubscribe events.
         subscriptionsNotificationsSmtpUnsubscribeFailedSubject:
         # The body of the email for Failed to Unsubscribe events.
         subscriptionsNotificationsSmtpUnsubscribeFailedBody:
         # Set to false to skip adding the environment name to the title and description of the API.
         appendEnvironmentToTitle: 

      readinessProbe:
         httpGet:
            httpHeaders:
               - name: k8sprobe
                 value: readiness.discoveryAgent
            path: /status
            port: 8989
            scheme: HTTP
         initialDelaySeconds: 20
         periodSeconds: 20
         successThreshold: 1
         timeoutSeconds: 3

      livenessProbe: 
         httpGet:
            httpHeaders:
               - name: k8sprobe
                 value: liveness.discoveryAgent
            path: /status
            port: 8989
            scheme: HTTP
         initialDelaySeconds: 60
         periodSeconds: 120
         successThreshold: 1
         timeoutSeconds: 3

      labels: {}
      podAnnotations: {}

      resources: {}
         # requests:
         #    cpu: "100m"
         #    memory: "200Mi"
         # limits:
         #    cpu: "500m"
         #    memory: "500Mi"

   # --------------------------------------------
   # ----------- Traceability agent -------------
   # --------------------------------------------
   traceability:
      # If enabled a dedicated deployment for the Traceability is created. 
      # Alternatively you may instead reate the configMap only using the toggle below to run the Traceability agent as a side-car
      enabled: false
      # If you want to run the traceability agent as a sidecar to your API-Traffic pods, then set the following flag 
      # to true create only the necessary ConfigMap, instead of a separate deployment. 
      # The ConfigMap then contains all the necessary environment variables for the traceability agent.
      # This is required/useful is your API-Gateway are writing to an emptyDir volume.
      # Check the examples how to setup an apitraffic-sidecar for Traceability agent
      createTraceabilityConfig: false
      # The number of replicas. Only applied, traceability.enabled: true
      replicas: 1
      image: "v7-traceability-agent"
      imageTag: "1.1.11"
      # command: [ "sh", "-c", "tail -f /dev/null" ]

      # A selection of the most important parameters for the traceability agent that are used 
      # to create the ConfigMap which is referenced below by envFrom
      config: 
         # You have to enable either Event-Log or OpenTraffic-Event log, but not both
         eventLogInput: true
         eventLogPaths: /events/DefaultGroup_traffic-*.log
         # Used to disable/enable the OpenTraffic log input for the Traceability Agent
         # Please note: This is required if you want to send Request- and Response-Header information
         openTrafficInput: false
         # The paths, comma separated, to the open traffic logs that need to be watched
         openTrafficPaths: /opentraffic/DefaultGroup_traffic-*.log
         # The required agent name of this agent on Amplify Central. The agent must have been configed on Central before
         agentName: 
         # Possible levels info, debug, warn, trace and error
         logLevel: info
         # The output for the log lines (stdout, file, both). When set to both for the Traceability Agent, only the file output will appear.
         logOutput: stdout
         # The path (relative or absolute) to save logs files, if output type file or both.
         logFilePath: logs
         # Determines what portions of a transactions PATH to send to Amplify Central. 
         # By default, the entire path is redacted. Example: [{keyMatch:".*"}] to send all paths.
         redactionPathShow: ""
         # Determines what Query Arguments to send to Amplify Central. 
         # By default, all query parameters are redacted. Example: [{keyMatch:".*"}] to send all query parameters.
         redactionQueryArgumentShow: ""
         # Determines what portions of a Query Argument value to sanitize. 
         # Sanitize query parameter tenantId to mask the ten first characters or less [{keyMatch:"tenantId",valueMatch:"^.{0,10}"}]
         redactionQueryArgumentSanitize: ""
         # Determines what Request Header Keys to send to Amplify Central. By default, all request headers are redacted. 
         # Example: [{keyMatch:"Accept.*"}, {keyMatch:"Connection"}] to send all Accept* and the Connection request header.
         redactionRequestHeaderShow: ""
         # Determines what portions of a Request Header value to sanitize. 
         # Sanitize Authorization request header to mask the ten first characters or less [{keyMatch:"Authorization",valueMatch:"^.{0,10}"}]
         redactionRequestHeaderSanitize: ""
         # Determines what Response Header Keys to send to Amplify Central. By default, all response headers are redacted. 
         # Example: [{keyMatch:".*"}] to send all response headers.
         redactionResponseHeaderShow: ""
         # Determines what portions of a Response Header value to sanitize. 
         # Example: [{keyMatch:"apiKey",valueMatch:".{0,10}$"}] to sanitize the apiKey request header to mask the last ten characters or less.
         redactionResponseHeaderSanitize: ""
         # Determines what JMS Properties to send to Amplify Central. By default, all JMS properties are redacted.
         # Example: [{keyMatch:".*"}] to send all JMS properties.
         redactionJmsPropertiesShow: ""
         # Determines what portions of a JMS Property value to sanitize.
         # Example: [{keyMatch:"jmsProviderURL",valueMatch:".{0,10}$"}] to sanitize the jmsProviderURL property to mask the last ten characters or less.
         redactionJmsPropertiesSanitize: ""
         # Determines what characters are displayed as the sanitized response header values on Amplify
         redactionMaskingCharacters: ""
         # How often should the agent send aggregated usage metrics to the platform
         usageReportingInterval: "15"

         # The percentage of all transactions that are sent to Amplify. A value of 0 reports no traffic
         samplingPercentage: "10"
         # When true, the percentage of API transactions sent will be based on each API ID in the transaction
         samplingPerApi: true

         # Protocol (https or tcp) to be used for communicating with ingestion service
         protocol: "tcp"
         # The socks5 or http URL of the proxy server for ingestion service. If empty, no proxy is defined.
         proxyUrl: ""
         # The gzip compression level for the output event
         compressionLevel: 3
         # The host name and port of the ingestion service to forward the transaction log entries
         host: ""

      extraEnvs: []
      #   - name: MY_ENVIRONMENT_VAR
      #     value: the_value_goes_here

      # When traceability.enabled: true, the following injects the environment variables 
      # from the ConfigMaps and Secrets into the traceability container. 
      # Specify your own ConfigMaps or Secrets if you don't provide Configuration and 
      # Secrets as part of this values.yaml.
      envFrom: 
      - configMapRef:
          name: axway-apim-traceability-config
      # Injects usernames, passwords, certificates and keys
      - secretRef:
          name: axway-apim-amplify-agents-secret

      readinessProbe:
         httpGet:
            httpHeaders:
               - name: k8sprobe
                 value: readiness.traceabilityAgent
            path: /status
            port: 8989
            scheme: HTTP
         initialDelaySeconds: 10
         periodSeconds: 20
         successThreshold: 1
         timeoutSeconds: 3

      livenessProbe: 
         httpGet:
            httpHeaders:
               - name: k8sprobe
                 value: liveness.traceabilityAgent
            path: /status
            port: 8989
            scheme: HTTP
         initialDelaySeconds: 60
         periodSeconds: 120
         successThreshold: 1
         timeoutSeconds: 3

      labels: {}
      podAnnotations: {}

      resources: {}
         # requests:
         #    cpu: "100m"
         #    memory: "200Mi"
         # limits:
         #    cpu: "500m"
         #    memory: "500Mi"

   updateStrategy: {}

   podSecurityContext:
      runAsUser: 1000
      fsGroup: 1000

   # Resources for all Agents containers (Discovery and Traceability)
   initResources: {}
   #   requests:
   #      cpu: "25m"
   #      memory: "80Mi"
   #   limits:
   #      cpu: "25m"
   #      memory: "80Mi"

##################################################################################################################################
#   PVCs
##################################################################################################################################

pvcs:
   # Events is used by ANM, APIMGR and APITRAFFIC
   events:
      # If disabled an emptyDir volume is used instead
      # Useful if you stream log information to an external logging system
      enabled: true
      eventsVolumeClaim:
         accessModes: [ "ReadWriteOnce" ]
         resources:
            requests:
               storage: 10Gi

   # OpenTraffic is used by APIMGR and APITRAFFIC
   opentraffic:
      # If disabled an emptyDir volume is used instead
      # Useful if you stream log information to an external logging system
      enabled: true
      opentrafficVolumeClaim:
         accessModes: [ "ReadWriteOnce" ]
         resources:
            requests:
               storage: 10Gi

   # Trace is used by APIMGR and APITRAFFIC
   trace:
      # If disabled an emptyDir volume is used instead
      # Useful if you stream log information to an external logging system
      enabled: true
      traceVolumeClaim:
         accessModes: [ "ReadWriteOnce" ]
         resources:
            requests:
               storage: 30Gi

   # Audit is used by APIMGR. 
   audit:
      # If disabled an emptyDir volume is used instead
      # Useful if you stream log information to an external logging system
      enabled: false
      auditVolumeClaim:
         accessModes: [ "ReadWriteOnce" ]
         resources:
            requests:
               storage: 1Gi

   metricsDbVolumeClaim:
      accessModes: [ "ReadWriteOnce" ]
      resources:
         requests:
            storage: 10Gi

   apiportalDbVolumeClaim:
      accessModes: [ "ReadWriteOnce" ]
      resources:
         requests:
            storage: 2Gi

   apiportalImagesVolumeClaim: 
      accessModes: [ "ReadWriteOnce" ]
      resources:
         requests:
            storage: 25Mi

   apiportalEnckeyVolumeClaim: 
      accessModes: [ "ReadWriteOnce" ]
      resources:
         requests:
            storage: 2Mi

   apiportalLanguageVolumeClaim: 
      accessModes: [ "ReadWriteOnce" ]
      resources:
         requests:
            storage: 5Mi

   apiportalTemplatesVolumeClaim: 
      accessModes: [ "ReadWriteOnce" ]
      resources:
         requests:
            storage: 30Mi

   apiportalAdmLanguageVolumeClaim: 
      accessModes: [ "ReadWriteOnce" ]
      resources:
         requests:
            storage: 10Mi

   apiportalCertsVolumeClaim: 
      accessModes: [ "ReadWriteOnce" ]
      resources:
         requests:
            storage: 2Mi

   apiportalPluginsVolumeClaim: 
      accessModes: [ "ReadWriteOnce" ]
      resources:
         requests:
            storage: 30Mi

##################################################################################################################################
#   CASSANDRA DATABASE
##################################################################################################################################
cassandra:
   # Set to false, to use an existing (external) Cassandra-DB
   internal: true

   # Only a subset of possible parameters is mentioned here. You can review and use all configuration values 
   # as documented here:
   # https://github.com/bitnami/charts/blob/master/bitnami/cassandra/values.yaml

   nameOverride: "cassandra"
   fullnameOverride: "cassandra"

   dbUser:
     # You need to configure Cassandra authentication with ${environment.CASS_USERNAME} using Policy-Studio
     user: cassandra
     # You need to configure Cassandra authentication with ${environment.CASS_PASS} using Policy-Studio
     # Please note: When not providing a password or secret, it must be provided during Helm release upgrades
     password: "changeme"
     # Use an existing secret object for dbUser.user password (will ignore dbUser.password)
     # Password must be stored using key: cassandra-password
     existingSecret: ""

   service:
     # Port is required here when using an external C* service
     port: 9042

   cluster: 
     # Name of the cluster - You cannot change this later
     name: "axway-apim-management"
     # Keyspace to use - You cannot change this later
     keyspace: "axway-apim-management"

   persistence:
     # @param persistence.enabled Enable Cassandra data persistence using PVC, use a Persistent Volume Claim, If false, use emptyDir
     enabled: true
     # @param persistence.storageClass PVC Storage Class for Cassandra data volume
     # If defined, storageClassName: <storageClass>
     # If set to "-", storageClassName: "", which disables dynamic provisioning
     # If undefined (the default) or set to null, no storageClassName spec is
     #   set, choosing the default provisioner.  (gp3 on AWS, standard on GKE, AWS & OpenStack)
     storageClass: ""
     # @param persistence.size PVC Storage Request for Cassandra data volume
     size: 8Gi

   metrics:
     # Start a side-car prometheus exporter
     enabled: false

   # We usually recommend not to specify default resources and to leave this as a conscious choice for the user.
   # This also increases chances charts run on environments with little resources, such as Minikube.
   # If you do want to specify resources, uncomment the CPU and memory values, adjust them as necessary, and remove the curly braces.
   resources:
     limits: {}
         # cpu: 2
         # memory: 4Gi
     requests: {}
         # cpu: 0.5
         # memory: 1Gi

##################################################################################################################################
#   EXTERNAL Metrics DB
##################################################################################################################################

# Is used by ANM, API-Manager and API-Gateway to establish the Metrics-DB-Connection
# This is ignored, when using mysqlmetrics.internal.
externalMetricsDB: {}
#   env:
     #- name: METRICS_DB_URL
     #  value: ""
     #- name: METRICS_DB_USERNAME
     #  value: ""
     #- name: METRICS_DB_PASS
     #  valueFrom: 
     #    secretKeyRef: 
     #      name: my-secret
     #      key: my-key

##################################################################################################################################
#   EXTERNAL API-Portal DB
##################################################################################################################################

# Is used by the API-Portal to establish the API-Portal-DB-Connection
# This is ignored, when using mysqlapiportal.internal.
externalApiportalDB: {}
#   env:
     #- name: MYSQL_HOST
     #  value: ""
     #- name: MYSQL_PORT
     #  value: ""
     #- name: MYSQL_DATABASE
     #  value: ""
     #- name: MYSQL_USER
     #  value: ""
     #- name: MYSQL_PASSWORD
     #  valueFrom: 
     #    secretKeyRef: 
     #      name: my-secret
     #      key: my-key
     ## Enable SSL encryption
     ## Requires a secret not included in this chart
     #- name: MYSQL_SSL_ON
     #  value: "1"
     #- name: MYSQL_SSL_CA_CERT
     #  valueFrom: 
     #    secretKeyRef: 
     #      name: my-secret
     #      key: my-key

##################################################################################################################################
#   INTERNAL METRICS DATABASE
##################################################################################################################################
mysqlmetrics:
   internal: true

   # Only a subset of possible parameters is mentioned here. You can review and use all configuration values 
   # as documented here:
   # https://github.com/bitnami/charts/blob/master/bitnami/mysql/values.yaml

   image:
     # registry: docker.io
     # repository: bitnami/mysql
     # tag: 8.0.27-debian-10-r8

   nameOverride: "mysqlmetrics"
   fullnameOverride: "mysqlmetrics"

   primary:
      persistence:
         enabled: true
         existingClaim: apigw-mysql-metrics
      # Configure to remove binLogs are 7 days instead of default 30
      extraFlags: "--binlog-expire-logs-seconds=604800"

      nodeSelector: {}
      securityContext: {}
      tolerations: []
      affinity: {}
      # We usually recommend not to specify default resources and to leave this as a conscious choice for the user.
      # This also increases chances charts run on environments with little resources, such as Minikube.
      # If you do want to specify resources, uncomment the CPU and memory values, adjust them as necessary, and remove the curly braces.
      resources:
         limits: {}
            # cpu: 0.5
            # memory: 1Gi
         requests: {}
            # cpu: 250m
            # memory: 256Mi

   ssl: false

   auth: 
      database: "metrics"
      # If not set a password is randomly generated
      # Please note: You need to provide the generated password to upgrade the release
      rootPassword: "changeme"
      username: "report"
      # If not set a password is randomly generated
      # Please note: You need to provide the generated password to upgrade the release
      password: "changeme"
      # An existing secret must contain the keys mysql-root-password / mysql-password
      existingSecret: ""

   initdbScriptsConfigMap: metrics

##################################################################################################################################
#   INTERNAL API-Portal DATABASE
##################################################################################################################################
mysqlapiportal:
   internal: true

   # Only a subset of possible parameters is mentioned here. You can review and use all configuration values 
   # as documented here:
   # https://github.com/bitnami/charts/blob/master/bitnami/mysql/values.yaml

   nameOverride: "mysqlapiportal"
   fullnameOverride: "mysqlapiportal"

   primary:
      persistence:
         enabled: true
         existingClaim: apigw-mysql-apiportal

      nodeSelector: {}
      securityContext: {}
      tolerations: []
      affinity: {}
      # We usually recommend not to specify default resources and to leave this as a conscious choice for the user.
      # This also increases chances charts run on environments with little resources, such as Minikube.
      # If you do want to specify resources, uncomment the CPU and memory values, adjust them as necessary, and remove the curly braces.
      resources:
         limits: {}
            # cpu: 0.5
            # memory: 1Gi
         requests: {}
            # cpu: 250m
            # memory: 256Mi

      # Configure to remove binLogs are 7 days instead of default 30
      extraFlags: "--binlog-expire-logs-seconds=604800"

   auth: 
      database: "apiportal"
      # If not set a password is randomly generated
      # Please note: You need to provide the generated password to upgrade the release
      rootPassword: "changeme"
      username: "report"
      # If not set a password is randomly generated
      # Please note: You need to provide the generated password to upgrade the release
      password: "changeme"
      # An existing secret must contain the keys mysql-root-password / mysql-password
      existingSecret: ""

##################################################################################################################################
#   INTERNAL REDIS DATABASE
##################################################################################################################################
apiportalredis:
   nameOverride: "apiportal-redis"
   fullnameOverride: "apiportal-redis"
   architecture: "standalone"
   auth:
      # Redis with AuthN is not supported by the API-Portal
      enabled: false

##################################################################################################################################
#   BASE - IMAGE for OpenShift only
##################################################################################################################################
base:
   useImagestream: false
   imageName: 
   imageTag: 

##################################################################################################################################
#   Filebeat - Operational Insights
##################################################################################################################################
# This section is dedicated to the Operational insights
# If enabled, all api-agateways pod will have a filebeat container. 
# Don't forget to adapt the the storage size for events and openlogging as recommended in the documentation.
# The filebeat config is based on the operational master chart. 
# The initial Helmchart provide more customization capabilities for Filebeat, like running it as a DaemontSet, etc. 
# https://github.com/Axway-API-Management-Plus/apigateway-openlogging-elk/tree/develop/helm

filebeat:
   enabled: false
   nameOverride:
   image:
     registry: docker.elastic.co
     repository: beats/filebeat
     tag: 7.17.1

   # Boulean to activate or not filbeat on any components
   componentEnabled:
      anm: true
      apimgr: true
      apitraffic: true

   # Secrets used to generate the secret <releaseName>-apim4elastic-filebeat-secret
   # which is referenced below. 
   # You may use your own secret and reference it here. 
   # See templates/elasticApimKibana/filebeat-secret.yaml for the required environment variable names
   # Disable the filebeatSecrets to use existing secret. Add custom values in extraEnvs section.
   filebeatSecrets: 
      enabled: true
      beatsSystemUsername: "beats_system"
      beatsSystemPassword: ""

   # Set the gateway name.
   # It's recommended to set a different name par API-Gateway Group.
   # Value by default is API-Manager
   gatewayName: ""
   # Set the region name.
   # It's recommended to set a different name per Admin Node Manager.
   # Value by default is N/A
   region: ""

   # The Logstash Hosts used by Filebeat
   # Set the Headless service when running in Kubernetes
   # or to an external logstash cluster
   logstashHosts: ""

  # The Elasticsearch Hosts used by filebeat
  # This must point to the Elasticsearch headless service when running in Kubernetes
  # or to an exernal Elasticsearch cluster.
   elasticsearchHosts: ""

  # Required for the internal stack monitoring to work with Filebeat
   elasticsearchClusterUUID: ""

   # Used by all components to verify the Elasticsearch certificate. If you 
   # have mounted your own certificate, you can overwrite the path here.
   elasticsearchCaPath: "config/certificates/ca.crt"
   # Define the name of an existing secret that contains the ca.crt
   # If empty, the value a secret is created with the mamdatory value elasticSearchCa
   elasticsearchCaSecret: ""
   # Use this value to load the CA during the deployment
   # It must be encoded in base64
   elasticSearchCa: ""

   # The number of Filebeat worker threads sending data to Logstash. See parameter: FILEBEAT_WORKER in env-sample
   filebeatWorker: 2

   # The gzip compression level. Setting this value to 0 disables compression. The compression level must be in the 
   # range of 1 (best speed) to 9 (best compression). Increasing the compression level will reduce the network usage but will 
   # increase the CPU usage.
   compressionLevel: 3

   # Stack monitoring for Filebeat, Logstash, Elasticsearch and Kibana using Self-Monitoring. 
   # Metricbeat monitoring is not yet supported in the Kubernetes deployment.
   selfMonitoringEnabled: "true"

   # Configure the Elasticsearch server certificate validation for APIBuilder4Elastic. Is enabled by default.
   # validateElasticsearchCertificate: "false"

   # Extra volumes can be added for custom configuration.
   # They must be added in volume in the apitraffic pod definition.
   extraVolumeMounts: []
   # - name: extras
   #   mountPath: /usr/share/extras
   #   readOnly: true

   # Environment variables can be added for custom configuration.
   # The following example add Logstash login/password secrets from an existing secret.
   extraEnvs: []
      # - name: BEATS_SYSTEM_USERNAME
      #   valueFrom:
      #    secretKeyRef:
      #       name: logstash-secret
      #       key: BEATS_SYSTEM_USERNAME
      # - name: BEATS_SYSTEM_PASSWORD
      #   valueFrom:
      #    secretKeyRef:
      #       name: logstash-secret
      #       key: BEATS_SYSTEM_PASSWORD

   # Replace the standard filebeat configuration by another
   # It replace data in filebeat configmaps in folders anm, apitraffic and apimgr
   anmCustomConfig: []
   apimgrCustomConfig: []
   apitrafficCustomConfig: []

  # Recommended resource requests for Filebeat
   resources:
      requests:
         cpu: "500m"
         memory: "150Mi"
      limits:
         cpu: "1000m"
         memory: "250Mi"


   # Set the value of the API-Builder component.
   # By default, host value is apibuilder4elastic and port value is 8443
   apibuilder4elasticHost: ""
   apibuilder4elasticPort: ""