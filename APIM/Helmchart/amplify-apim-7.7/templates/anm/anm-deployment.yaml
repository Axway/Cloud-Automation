apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    apigw.version: {{ .Values.global.apimVersion | quote }}
    apigw.editor: {{ .Values.global.editor | quote }}
  labels:
    app: {{ .Values.anm.name }}
  name: {{ .Values.anm.name }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.anm.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.anm.name | quote }}
  strategy:
    type: {{ .Values.global.updateStrategy }}
  template:
    metadata:
      labels:
        app: {{ .Values.anm.name | quote }}
    spec:
      {{- if eq .Values.global.nodeAffinity.enable true }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: agentpool
                operator: In
                values:
                - {{ .Values.global.nodeAffinity.apimName }}
      {{- end }}
      containers:
      - name: {{ .Values.anm.name | quote }}
        image: {{ .Values.global.dockerRegistry.url }}/{{ .Values.anm.imageName }}:{{ .Values.anm.buildTag }}
        imagePullPolicy: {{ .Values.global.pullPolicy }}
        env:
        - name: GW_DIR
          value: /opt/Axway/apigateway
        - name: GW_TRACE_DIR
          value: /opt/Axway/apigateway/trace
        - name: EMT_TOPOLOGY_TTL
          value: "{{ .Values.anm.emt_topology_ttl }}"
        - name: EMT_HEAP_SIZE_MB
          value: "{{ .Values.anm.emt_heap_size_mb }}"
        - name: EMT_TRACE_LEVEL
          value: {{ .Values.anm.emt_trace_level }}
        - name: APIGW_LOG_TRACE_TO_FILE
          value: "{{ .Values.anm.logTraceToFile }}"
        - name: APIGW_LOG_TRACE_JSON_TO_STDOUT
          value: "{{ .Values.anm.logTraceJSONtoSTDOUT }}"
        - name: METRICS_DB_URL
          value: jdbc:mysql://{{ .Values.mysqlAnalytics.name }}:{{ .Values.mysqlAnalytics.port }}/{{ .Values.mysqlAnalytics.dbName }}?useSSL={{ .Values.mysqlAnalytics.ssl }}
        - name: METRICS_DB_USERNAME
          value: {{ .Values.mysqlAnalytics.adminUser }}
        - name: METRICS_DB_PASS
          valueFrom:
            secretKeyRef:
              name: apim-password
              key: dbmysqlanalytics
        args:
          - /opt/Axway/apigateway/posix/bin/start-emt-nodemanager
        ports:
        - containerPort: {{ .Values.anm.trafficPort }}
          protocol: TCP
        - containerPort: {{ .Values.anm.trafficPortUI }}
          protocol: TCP
        resources:
          limits:
            memory: "2048Mi"
            cpu: "1000m"
          requests:
            memory: "1Gi"
            cpu: "250m" 
        livenessProbe:
          httpGet:
            httpHeaders:
            - name: k8sprobe
              value: liveness.{{ .Values.anm.name }}
            path: /healthcheck
            port: {{ .Values.anm.trafficPortUI }}
            scheme: HTTPS
          initialDelaySeconds: 40
          periodSeconds: 30
          failureThreshold: 5
        readinessProbe:
          httpGet:
            httpHeaders:
            - name: k8sprobe
              value: readiness.{{ .Values.anm.name }}
            path: /healthcheck
            port: {{ .Values.anm.trafficPortUI }}
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 10
          failureThreshold: 6
        lifecycle:
          preStop:
            exec:
              command: ["sleep","90"]
        volumeMounts:
        - name: events
          mountPath: {{ .Values.apitraffic.share.path | quote }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      imagePullSecrets:
      - name: {{ .Values.global.dockerRegistry.secret }}
      initContainers:
      - name: init-mysql
        image: {{ .Values.global.initImageTag | quote }}
        command: ['sh', '-c', 'until nc -w 3 -v {{ .Values.mysqlAnalytics.name }} 3306; do echo waiting for mysql; sleep 2; done;']
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 101
      {{- if ne .Values.global.platform "OPENSHIFT" }}
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      {{- end }}
      volumes:
      - name: events
        persistentVolumeClaim:
          claimName: apigw-events
      terminationGracePeriodSeconds: 100
status: {}
