apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Values.apitraffic.name }}
  name: {{ .Values.apitraffic.name }}
  namespace: {{ .Release.Namespace | quote }} 
spec:
  replicas: {{ .Values.apitraffic.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.apitraffic.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.apitraffic.name }}
    spec:
      affinity:
        {{- if eq .Values.global.nodeAffinity.enable true }}
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: agentpool
                operator: In
                values:
                - {{ .Values.global.nodeAffinity.apimName }}
        {{- end }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - {{ .Values.apitraffic.name }}
              topologyKey: kubernetes.io/hostname
      imagePullSecrets:
      - name: {{ .Values.global.dockerRegistry.secret }}
      containers:
      - args:
        - /opt/Axway/apigateway/posix/bin/start-emt-instance
        env:
        - name: GW_DIR
          value: /opt/Axway/apigateway
        - name: GW_TRACE_DIR
          value: /opt/Axway/apigateway/groups/topologylinks/emt-group-emt-service/trace
        - name: CASS_HOST
          value: {{ .Values.cassandra.name }}
        - name: CASS_PORT
          value: {{ .Values.cassandra.portCql | quote }}
        - name: CASS_KEYSPACE
          value: {{ .Values.cassandra.keyspace }}
        - name: CASS_TKEYSPACE
          value: t_{{ .Values.cassandra.keyspace }}
        - name: CASS_USERNAME
          value: {{ .Values.cassandra.adminName }}
        - name: CASS_PASS
          valueFrom:
            secretKeyRef:
              name: apim-password
              key: dbcass
        - name: EMT_ANM_HOSTS
          value: {{ .Values.anm.name }}:{{ .Values.anm.trafficPort }}
        - name: EMT_TOPOLOGY_LOG_ENABLED
          value: "{{ .Values.apitraffic.emt_topology_log_enabled }}"
        - name: EMT_TOPOLOGY_TTL
          value: "{{ .Values.apitraffic.emt_topology_ttl }}"
        - name: EMT_HEAP_SIZE_MB
          value: "{{ .Values.apitraffic.emt_heap_size_mb }}"
        - name: EMT_TRACE_LEVEL
          value: {{ .Values.apitraffic.emt_trace_level }}
        - name: APIGW_LOG_TRACE_TO_FILE
          value: "{{ .Values.apitraffic.logTraceToFile }}"
        - name: APIGW_LOG_TRACE_JSON_TO_STDOUT
          value: "{{ .Values.apitraffic.logTraceJSONtoSTDOUT }}"
        - name: APIGW_LOG_OPENTRAFFIC_OUTPUT
          value: "{{ .Values.apitraffic.logOpenTrafficOutput }}"
        - name: EMT_DEPLOYMENT_ENABLED
          value: "{{ .Values.global.emtDeployment }}"
        - name: METRICS_DB_URL
          value: jdbc:mysql://{{ .Values.mysqlAnalytics.name }}:{{ .Values.mysqlAnalytics.port }}/{{ .Values.mysqlAnalytics.dbName }}?useSSL={{ .Values.mysqlAnalytics.ssl }}
        - name: METRICS_DB_USERNAME
          value: {{ .Values.mysqlAnalytics.adminUser }}
        - name: METRICS_DB_PASS
          valueFrom:
            secretKeyRef:
              name: apim-password
              key: dbmysqlanalytics
        image: {{ .Values.global.dockerRegistry.url }}/{{ .Values.apitraffic.imageName }}:{{ .Values.apitraffic.buildTag }} 
        imagePullPolicy: {{ .Values.global.pullPolicy }} 
        name: {{ .Values.apitraffic.name }}
        volumeMounts:
        - mountPath: {{ .Values.apitraffic.share.path | quote }}
          name: events
        {{- if eq .Values.global.enableDynamicLicense true }}
        - name: config-license
          mountPath: "/opt/Axway/apigateway/conf/licenses/lic.lic"
          subPath: license
        {{- end }}
        ports:
        - containerPort: {{ .Values.apitraffic.portManager }}
          protocol: TCP
        - containerPort: {{ .Values.apitraffic.portGateway }}
          protocol: TCP
        - containerPort: {{ .Values.apitraffic.portGatewaySSL }}
          protocol: TCP
        {{- if eq .Values.oauth.enable true }}
        - containerPort: {{ .Values.oauth.trafficPort }}
          protocol: TCP
        {{- end }}
        resources:
          limits:
            memory: "2Gi"
            cpu: 2
          requests:
            memory: "0.5Gi"
            cpu: 0.5
        readinessProbe:
          httpGet:
            httpHeaders:
            - name: k8sprobe
              value: readiness.{{ .Values.apitraffic.name }}
            path: /healthcheck
            port: {{ .Values.apitraffic.portManager }}
            scheme: HTTPS
          initialDelaySeconds: 40
          periodSeconds: 30
          failureThreshold: 5
        livenessProbe:
          httpGet:
            httpHeaders:
            - name: k8sprobe
              value: liveness.{{ .Values.apitraffic.name }}
            path: /healthcheck
            port: {{ .Values.apitraffic.portManager }}
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 30
          failureThreshold: 5
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        lifecycle:
          preStop:
            exec:
              command: ["/bin/bash", "-c", "sleep 90"]
      initContainers:
      - name: init-cassandra
        image: {{ .Values.global.initImageTag }}
        command: ['sh', '-c', 'until nc -w 3 -v {{ .Values.cassandra.name }} 9042; do echo waiting for cassandra; sleep 60; done;']
      - name: init-dbanalytics
        image: {{ .Values.global.initImageTag }}
        command: ['sh', '-c', 'until nc -w 3 -v {{ .Values.mysqlAnalytics.name }} 3306; do echo waiting for mysql; sleep 2; done;']
      - name: init-anm
        image: {{ .Values.global.initImageTag }}
        command: ['sh', '-c', 'until nc -w 3 -v {{ .Values.anm.name }} 8090; do echo waiting for anm; sleep 2; done;']
      - name: init-apimanager
        image: {{ .Values.global.initImageTag }}
        command: ['sh', '-c', 'until nc -w 3 -v {{ .Values.apimgr.name }} 8075; do echo waiting for mgmt; sleep 2; done;']
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      {{- if ne .Values.global.platform "OPENSHIFT" }}
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      {{- end }}
      volumes:
      - name: events
        persistentVolumeClaim:
          claimName: apigw-events
      {{- if eq .Values.global.enableDynamicLicense true }}
      - name: config-license
        configMap:
          name: license
      {{- end }}
      terminationGracePeriodSeconds: 100
  strategy:
    type: {{ .Values.global.updateStrategy }}
