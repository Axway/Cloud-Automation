{{- if eq .Values.apiportal.enabled true }}
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: {{ .Values.apiportal.name | quote }}
    version: {{ .Values.apiportal.buildTag }}
  name: {{ .Values.apiportal.name  | quote }}
  namespace: {{ .Values.global.namespace | quote }}
spec:
  replicas: {{ .Values.apiportal.replicaCount }}
  selector:
    matchLabels:
      app: {{ .Values.apiportal.name }}
  template:
    metadata:
      labels:
        app: {{ .Values.apiportal.name | quote }}
    spec:
      affinity:
        {{- if eq .Values.global.nodeAffinity.enabled true }}
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: agentpool
                operator: In
                values: 
                - {{ .Values.global.nodeAffinity.name }}
        {{- end }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - {{ .Values.apiportal.name | quote }}
              topologyKey: kubernetes.io/hostname
      imagePullSecrets:
        - name: {{ .Values.global.dockerRegistries.apimSecret }}
      containers:
      - env:
        - name: MYSQL_HOST
          value: {{ .Values.mysqlPortal.name | quote }}
        - name: MYSQL_PORT
          value: {{ .Values.mysqlPortal.port | quote }}
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: apim-password
              key: dbmysqlroot
        - name: MYSQL_USERNAME
          value: {{ .Values.mysqlPortal.adminUser }}
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: apim-password
              key: dbmysqlportal
        - name: MYSQL_DBNAME
          value: {{ .Values.mysqlPortal.dbName }}
        - name: APIMANAGER_HOST
          value: {{ .Values.apimgr.name }}
        - name: APIMANAGER_PORT
          value: {{ .Values.apimgr.trafficPort | quote }}
        - name: APIMANAGER_PUBLIC_NAME
          value: {{ .Values.apimgr.name }}
        name: {{ .Values.apiportal.name }}
        image: {{ .Values.global.dockerRegistries.apimName }}/{{ .Values.apiportal.imageName }}:{{ .Values.apiportal.buildTag }}
        imagePullPolicy: {{ .Values.global.pullPolicy }}
        readinessProbe:
          httpGet:
            path: /
            port: 443
            scheme: HTTPS
          initialDelaySeconds: 10
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /
            port: 443
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 5
        ports:
        - containerPort: {{ .Values.apiportal.trafficPort }} 
          protocol: TCP
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        resources: {}
      terminationGracePeriodSeconds: 30
      initContainers:
      - name: init-mysql
        image: {{ .Values.global.initImageTag }}
        command: ['sh', '-c', 'until nc -w 3 -v {{ .Values.mysqlPortal.name }} 3306; do echo waiting for mysql; sleep 2; done;']
      - name: init-apimgmt
        image: {{ .Values.global.initImageTag }}
        command: ['sh', '-c', 'until nc -w 3 -v {{ .Values.apimgr.name }} 8065; do echo waiting for apimgr; sleep 2; done;']
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
  strategy:
    type: {{ .Values.global.updateStrategy }}
status: {}
{{- end }}
