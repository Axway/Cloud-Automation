NAME: my-apim
LAST DEPLOYED: Fri Apr  2 07:23:51 2021
NAMESPACE: apim
STATUS: pending-install
REVISION: 1
TEST SUITE: None
HOOKS:
MANIFEST:
---
# Source: amplify-apim-7.7/templates/common/apimPasswd-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: apim-password
  namespace: "apim"
type: Opaque
data:
  dbmysqlanalytics: Y2hhbmdlbWU=
  dbmysqlroot: Y2hhbmdlbWU=
  dbmysqlportal: Y2hhbmdlbWU=
  dbcass: Y2hhbmdlbWU=
---
# Source: amplify-apim-7.7/templates/common/registry-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: "apim"
data:
  .dockerconfigjson: eyJhdXRocyI6IHsiMTcyLjMwLjEuMTo1MDAwL2FwaW0iOiB7ImF1dGgiOiAiWkdWMlpXeHZjR1Z5T20xNFp6ZE5NMmxQWDNSeE5VbzVaRVV5V0cxRGVVMUlUR3M0VjJwU09VeHVhQzFNZGswM1p6a3libmM9In19fQ==
type: kubernetes.io/dockerconfigjson
---
# Source: amplify-apim-7.7/templates/common/license-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
   name: licence
   namespace: "apim"
data:
   license: |
    FIPS=1
    SalesForce Connector=1
    ServiceNow Connector=1
    analytics=1
    api_visual_mapper=1
    apiportal=1
    company=Axway
    deployment_type=docker
    expires=Fri, 30 Apr 2021 19:22:58 GMT
    license_id=TEMP
    mcafee=1
    name=Axway
    sdkgenerator=1
    unrestricted=1
    version=7.7
    # SIGNATURE: 1d69490e43d472c5d4a5a6231345ff0969ee0a6478bb6cb091b26512e4aa8ee6
    # SIGNATURE: f1481ba07cd1a91bae9f497e3ba49f40c88c8a65a956db6f01e5ff7b9f31f7fe
    # SIGNATURE: 15d98bd2d9343dab984a972b04ad817c6ddf6476f3e0d22820492c088aad400b
    # SIGNATURE: 4e934fdd27bc93f38457512b822fcc4d7c9d106e5f6ff816851945b13f100fbd
    # SIGNATURE: 10a9b654071719b2dc76cbb733a24c190f5d643782b939964a48003f9366875e
    # SIGNATURE: 7036cd4dc544a17815b3b6c162f2bda16da522b454e9327522eef6ae898304f0
    # SIGNATURE: d9a8977d46548ccde9a89bb6564cdeff88cb5d2dc6cc5c307abcc8cd4ca92589
    # SIGNATURE: 4f60b8fc33d8573b8eb568957f7b0a6e94485e1b7041a7b9d1b9c9af05139dd4
---
# Source: amplify-apim-7.7/templates/mysqlAnalytics/mysql-configmap-analytics.yaml
apiVersion: v1
data:
  analytics.sql: "/* MySQL SQL Script */\n\n/* Don't Drop the Tables when running
    in Kubernetes */\n-- DROP TABLE if EXISTS audit_message_payload;\n-- DROP TABLE
    if EXISTS audit_log_points;\n-- DROP TABLE if EXISTS audit_log_sign;\n-- DROP
    TABLE if EXISTS transaction_data;\n-- DROP TABLE IF EXISTS metrics_alerts;\n--
    DROP TABLE IF EXISTS metrics_data;\n-- DROP TABLE IF EXISTS metric_groups;\n--
    DROP TABLE IF EXISTS processes;\n-- DROP TABLE IF EXISTS process_groups;\n-- DROP
    TABLE IF EXISTS metric_group_types_map;\n-- DROP TABLE if EXISTS metric_group_types;\n--
    DROP TABLE if EXISTS metric_types;\n-- DROP TABLE if EXISTS time_window_types;\n--
    DROP TABLE if EXISTS versions;\n\nCREATE TABLE IF NOT EXISTS process_groups (\n
    \ ID int NOT NULL auto_increment,\n  TopologyID nvarchar(32) NOT NULL,    \n  Name
    nvarchar(255) NOT NULL,\n  PRIMARY KEY (ID),\n  CONSTRAINT UQ_ProcessGroups_TopologyID
    UNIQUE(TopologyID)  \n);\n\nCREATE TABLE IF NOT EXISTS processes (\n  ID int NOT
    NULL auto_increment,\n  TopologyID nvarchar(32) NOT NULL,  \n  Name nvarchar(255)
    NOT NULL,\n  Host varchar(255) NOT NULL,\n  GroupID int NOT NULL,\n  PRIMARY KEY
    (ID),\n  CONSTRAINT UQ_Processes_TopologyID UNIQUE(TopologyID),\n  CONSTRAINT
    FK_ProcessGroups_Processes_ID FOREIGN KEY(GroupID) REFERENCES process_groups(ID)\n);\n\nCREATE
    TABLE IF NOT EXISTS metric_group_types (\n  ID int NOT NULL AUTO_INCREMENT,\n
    \ Name nvarchar(255) NOT NULL,\n  \n  PRIMARY KEY (ID),\n  CONSTRAINT UQ_MetricGroupTypes_Name
    UNIQUE(Name)\n);\n\nCREATE TABLE IF NOT EXISTS metric_types (\n  ID int NOT NULL
    AUTO_INCREMENT,\n  Name nvarchar(255) NOT NULL,\n  AggregationFunction enum('Unknown',
    'None', 'SUM', 'AVG', 'MAX', 'MIN') NOT NULL, \n\n  PRIMARY KEY (ID),\n  KEY `AggregationFunction`
    (`AggregationFunction`),                -- D-82336 \n  CONSTRAINT UQ_MetricTypes_Name
    UNIQUE(Name)\n);\n\nCREATE TABLE IF NOT EXISTS metric_group_types_map (\n  MetricGroupTypeID
    int NOT NULL,\n  MetricTypeID int NOT NULL,\n  CONSTRAINT PK_MetricGroupTypesMap
    PRIMARY KEY (MetricGroupTypeID, MetricTypeID),\n  CONSTRAINT FK_MetricGroupTypesMap_MetricTypes_ID
    FOREIGN KEY(MetricTypeID) REFERENCES metric_types(ID),\n  CONSTRAINT FK_MetricGroupTypesMap_MetricGroupTypes_ID
    FOREIGN KEY(MetricGroupTypeID) REFERENCES metric_group_types(ID)\n);\n\nCREATE
    TABLE IF NOT EXISTS time_window_types (\n  ID int NOT NULL,\n  Name nvarchar(255)
    NOT NULL,\n  WindowSizeMillis int NOT NULL,\n  PRIMARY KEY (ID)\n);\n\n# Add the
    currently supported entries\nINSERT IGNORE INTO time_window_types (ID, Name, WindowSizeMillis)
    VALUES(0, '5-second', 5000);\nINSERT IGNORE INTO time_window_types (ID, Name,
    WindowSizeMillis) VALUES(1, '5-minute', 300000);\nINSERT IGNORE INTO time_window_types
    (ID, Name, WindowSizeMillis) VALUES(2, '1-hour', 3600000);\n\nCREATE TABLE IF
    NOT EXISTS metric_groups (\n  ID int NOT NULL auto_increment,\n  ProcessID int
    NOT NULL,\n  MetricGroupTypeID int NOT NULL,\n  Name nvarchar(255) default NULL,\n
    \ DisplayName nvarchar(255) default NULL,\n  ParentID int NOT NULL,\n  \n  PRIMARY
    KEY (ID),\n  KEY `Name` (`Name`),                -- D-82336 \n  KEY `DisplayName`
    (`DisplayName`),  -- D-82336 \n  KEY `ParentID` (`ParentID`),        -- D-82336
    \n  CONSTRAINT FK_MetricGroups_Processes_ID FOREIGN KEY(ProcessID) REFERENCES
    processes(ID),\n  CONSTRAINT FK_MetricGroups_MetricGroupTypes_ID FOREIGN KEY(MetricGroupTypeID)
    REFERENCES metric_group_types(ID)\n  /* do not enable constraints ParentID */\n);\n\n\n\n--
    D-82336 change primary key so that MetricTimestamp is last in the composite index:
    \"The order of the fields in the index is very important. \n-- The way b-tree
    works, it is more beneficial to have a field which will be used for “equality”
    comparison first and the \n-- fields with “range” (more than and less than comparison)
    second.\n\nCREATE TABLE IF NOT EXISTS metrics_data (\n  MetricTimestamp datetime
    NOT NULL,\n  MetricGroupID int NOT NULL,\n  MetricTypeID int NOT NULL,    \n  TimeWindowTypeID
    int NOT NULL,\n  Value BIGINT NOT NULL,\n    PRIMARY KEY (MetricGroupID, MetricTypeID,
    TimeWindowTypeID, MetricTimestamp),  -- D-82336\n    KEY `MetricTimestamp` (`MetricTimestamp`),
    \               -- D-82336 \n    CONSTRAINT FK_MetricsData_MetricGroups_ID FOREIGN
    KEY(MetricGroupID) REFERENCES metric_groups(ID),\n    CONSTRAINT FK_MetricsData_MetricTypes_ID
    FOREIGN KEY(MetricTypeID) REFERENCES metric_types(ID),\n    CONSTRAINT FK_MetricsData_TimeWindowTypes_ID
    FOREIGN KEY(TimeWindowTypeID) REFERENCES time_window_types(ID)\n);\n\n\nCREATE
    TABLE IF NOT EXISTS metrics_alerts (\n  ID varchar(255) NOT NULL,\n  ProcessID
    int NOT NULL,\n  AlertTimestamp datetime NULL,\n  AlertLevel varchar(5) NOT NULL,\n
    \ AlertType enum(\n      'AlertMessage',\n      'SlaBreachAlertMessage',\n      'SlaClearAlertMessage')
    NOT NULL,\n  Message nvarchar(4096) default NULL,\n  MessageID varchar(255) default
    NULL,\n\n  PRIMARY KEY (ID, ProcessID),\n  KEY MessageID (MessageID),\n  CONSTRAINT
    FK_MetricsAlerts_Processes_ID FOREIGN KEY(ProcessID) REFERENCES processes(ID)\n);\n\nCREATE
    TABLE IF NOT EXISTS audit_log_points (                        \n     ID int NOT
    NULL auto_increment,     \n     ProcessID int NOT NULL,\n     MessageID varchar(255)
    NOT NULL,                \n     Text longtext NOT NULL,                \n     LogLevel
    bigint NOT NULL default '0',           \n     LogTimestamp timestamp NOT NULL,\n
    \    LogTimeMillis bigint NOT NULL default '0',\n     FilterName nvarchar(255)
    NOT NULL,               \n     FilterType varchar(255) NOT NULL,\n     FilterCategory
    varchar(255) default NULL,                                                                                         \n\n
    \    PRIMARY KEY  (ID),                            \n     KEY MessageID (MessageID),\n
    \    CONSTRAINT FK_AuditLogPoints_Processes_ID FOREIGN KEY(ProcessID) REFERENCES
    processes(ID)                                             \n   );\n\nCREATE TABLE
    IF NOT EXISTS audit_message_payload (                                                                                                                         \n
    \ AuditLogPointsID int NOT NULL default '0',                                                                                                           \n
    \ MessageBody longblob default NULL,                                                                                                                                       \n
    \ MessageHeader longblob default NULL,                                                                                                                                     \n
    \ HttpRequestVerb varchar(10) default NULL,                                                                                                                    \n
    \ HttpRequestURI varchar(255) default NULL,                                                                                                                   \n
    \ HttpRequestVersion varchar(4) default NULL,                                           \n
    \ PRIMARY KEY  (AuditLogPointsID),                                                                                                                             \n
    \ CONSTRAINT FK_AuditMessagePayload_AuditLogPoints FOREIGN KEY (AuditLogPointsID)
    REFERENCES audit_log_points (ID) ON DELETE CASCADE ON UPDATE CASCADE  \n);\n\nCREATE
    TABLE IF NOT EXISTS audit_log_sign (      \n   ProcessID int NOT NULL,                                                   \n
    \  MessageID varchar(255) NOT NULL,\n   Signature longblob default NULL,                                                                  \n
    \  PRIMARY KEY  (ProcessID, MessageID),\n   CONSTRAINT FK_AuditLogSign_Processes_ID
    FOREIGN KEY(ProcessID) REFERENCES processes(ID)                                                                                                            \n
    );\n\nCREATE TABLE IF NOT EXISTS transaction_data (\n  ProcessID int NOT NULL,\n
    \ MessageID varchar(255) NOT NULL,\n  TransactionTimestamp datetime NOT NULL,\n
    \ AttributeName varchar(255) NOT NULL,\n  AttributeValue nvarchar(255) NOT NULL,
    \n  PRIMARY KEY(ProcessID, MessageID, AttributeName),\n  CONSTRAINT FK_TransactionData_Processes_ID
    FOREIGN KEY(ProcessID) REFERENCES processes(ID) \n);\n\nCREATE TABLE IF NOT EXISTS
    versions (\n    Name nvarchar(255) NOT NULL,\n    Value nvarchar(255) NOT NULL,\n
    \   CONSTRAINT UQ_Versions_Name UNIQUE(Name)  \n);\n\nINSERT IGNORE INTO versions(Name,
    Value) VALUES('schema', '002-leaf');\n\nCOMMIT;                 \n\nSHOW TABLES;\n\nSHOW
    DATABASES;\n"
kind: ConfigMap
metadata:
  name: analytics
  namespace: "apim"
---
# Source: amplify-apim-7.7/templates/apitraffic/apitraffic-events-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: apigw-events
  namespace: "apim"
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
# Source: amplify-apim-7.7/templates/mysqlAnalytics/mysql-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    data: mysql-analytics
  name: mysql-analytics-pvc
  namespace: "apim"
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
# Source: amplify-apim-7.7/templates/anm/anm-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: "anm"
  name: "anm"
  namespace: "apim"
spec:
  clusterIP: None
  ports:
  - name: gatewaymanager
    port: 8090 
    targetPort: 8090
    protocol: TCP
  - name: gatewaymanagerui
    port: 8091
    targetPort: 8091
    protocol: TCP
  selector:
    app: "anm"
  sessionAffinity: ClientIP
  type: ClusterIP
---
# Source: amplify-apim-7.7/templates/apiaga/apiaga-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: "apiaga"
  name: "apiaga"
  namespace: "apim"
spec:
  clusterIP: None
  ports:
  - port: 8040
    targetPort: 8040 
    protocol: TCP
  selector:
    app: "apiaga"
  sessionAffinity: ClientIP
  type: ClusterIP
status:
  loadBalancer: {}
---
# Source: amplify-apim-7.7/templates/apimgr/apimgr-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: "apimgr"
  name: "apimgr"
  namespace: "apim"
spec:
  clusterIP: None
  ports:
  - port: 8075
    targetPort: 8075 
    protocol: TCP
  selector:
    app: "apimgr"
  sessionAffinity: ClientIP
  type: ClusterIP
status:
  loadBalancer: {}
---
# Source: amplify-apim-7.7/templates/apitraffic/apitraffic-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    name: traffic
  name: traffic
  namespace: "apim" 
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - port: 8065
    targetPort: 8065
    name: trafficmanager
    protocol: TCP
  - port: 8080
    targetPort: 8080
    name: trafficgateway
    protocol: TCP
  - port: 8081
    targetPort: 8081
    name: trafficgatewayssl
    protocol: TCP
  selector:
    app: traffic
  sessionAffinity: None
---
# Source: amplify-apim-7.7/templates/cassandra/cassandra-peer-service.yaml
# Headless service that allows us to get the IP addresses of our Cassandra nodes
apiVersion: v1
kind: Service
metadata:
  labels:
    app: cassandra-peers
  name: cassandra-peers
  namespace: "apim"
spec:
  clusterIP: None
  ports:
   - port: 7000
     name: intra-node-communication
   - port: 7001
     name: tls-intra-node-communication
  selector:
   app: cassandra
---
# Source: amplify-apim-7.7/templates/cassandra/cassandra-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    app: cassandra
  name: cassandra
  namespace: "apim"
spec:
  clusterIP: None
  ports:
    - name: cql
      port: 9042
      targetPort: 9042
  selector:
    app: cassandra
---
# Source: amplify-apim-7.7/templates/mysqlAnalytics/mysql-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    name: mysql-aga
  name: mysql-aga
  namespace: "apim"
spec:
  clusterIP: None
  ports:
  - port: 3306
    targetPort: 3306
    protocol: TCP
  selector:
    app: mysql-aga
  clusterIP: None
---
# Source: amplify-apim-7.7/templates/anm/anm-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    apigw.version: "7.7-20210130"
    apigw.editor: "Axway"
  labels:
    app: anm
  name: anm
  namespace: apim
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "anm"
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: "anm"
    spec:
      containers:
      - name: "anm"
        image: 172.30.1.1:5000/apim/apim-anm-7.7:20210130
        imagePullPolicy: Always
        env:
        - name: GW_DIR
          value: /opt/Axway/apigateway
        - name: GW_TRACE_DIR
          value: /opt/Axway/apigateway/trace
        - name: EMT_TOPOLOGY_TTL
          value: "10"
        - name: EMT_HEAP_SIZE_MB
          value: "1024"
        - name: EMT_TRACE_LEVEL
          value: INFO
        - name: APIGW_LOG_TRACE_TO_FILE
          value: "true"
        - name: APIGW_LOG_TRACE_JSON_TO_STDOUT
          value: "false"
        - name: METRICS_DB_URL
          value: jdbc:mysql://mysql-aga:3306/analytics?useSSL=false
        - name: METRICS_DB_USERNAME
          value: report
        - name: METRICS_DB_PASS
          valueFrom:
            secretKeyRef:
              name: apim-password
              key: dbmysqlanalytics
        args:
          - /opt/Axway/apigateway/posix/bin/start-emt-nodemanager
        ports:
        - containerPort: 8090
          protocol: TCP
        - containerPort: 8091
          protocol: TCP
        resources:
          limits:
            memory: "2048Mi"
            cpu: "1000m"
          requests:
            memory: "1Gi"
            cpu: "250m" 
        livenessProbe:
          httpGet:
            httpHeaders:
            - name: k8sprobe
              value: liveness.anm
            path: /healthcheck
            port: 8091
            scheme: HTTPS
          initialDelaySeconds: 40
          periodSeconds: 30
          failureThreshold: 5
        readinessProbe:
          httpGet:
            httpHeaders:
            - name: k8sprobe
              value: readiness.anm
            path: /healthcheck
            port: 8091
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 10
          failureThreshold: 6
        lifecycle:
          preStop:
            exec:
              command: ["sleep","90"]
        volumeMounts:
        - name: events
          mountPath: "/opt/Axway/apigateway/events"
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      imagePullSecrets:
      - name: registry-secret
      initContainers:
      - name: init-mysql
        image: "busybox:1.33"
        command: ['sh', '-c', 'until nc -w 3 -v mysql-aga 3306; do echo waiting for mysql; sleep 2; done;']
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 101
      volumes:
      - name: events
        persistentVolumeClaim:
          claimName: apigw-events
      terminationGracePeriodSeconds: 100
status: {}
---
# Source: amplify-apim-7.7/templates/apiaga/apiaga-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: "apiaga"
  name: "apiaga"
  namespace: "apim"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "apiaga"
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: "apiaga"
    spec:
      containers:
      - args:
        - /opt/Axway/analytics/posix/bin/start-emt-analytics
        env:
        - name: EMT_ANM_HOSTS
          value: anm:8090
        - name: EMT_TOPOLOGY_TTL
          value: "10"
        - name: EMT_HEAP_SIZE_MB
          value: "1024"
        - name: EMT_TRACE_LEVEL
          value: INFO
        - name: METRICS_DB_URL
          value: jdbc:mysql://mysql-aga:3306/analytics?useSSL=false
        - name: METRICS_DB_USERNAME
          value: report
        - name: METRICS_DB_PASS
          valueFrom:
            secretKeyRef:
              name: apim-password
              key: dbmysqlanalytics
        - name: EMT_DEPLOYMENT_ENABLED
          value: "true"
        image: 172.30.1.1:5000/apim/apim-aga-7.7:20210130
        imagePullPolicy: "Always"
        name: "apiaga"
        ports:
        - containerPort: 8040
          protocol: TCP
        resources: {}
        readinessProbe:
          httpGet:
            httpHeaders:
            - name: k8sprobe
              value: readiness.apiaga
            path: /healthcheck
            port: 8040
            scheme: HTTPS
          initialDelaySeconds: 50
          periodSeconds: 15
          failureThreshold: 10
        livenessProbe:
          httpGet:
            httpHeaders:
            - name: k8sprobe
              value: liveness.apiaga
            path: /healthcheck
            port: 8040
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 30
          failureThreshold: 5
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        lifecycle:
          preStop:
            exec:
              command: ["sleep","90"]
      initContainers:
      - name: init-mysql
        image: busybox:1.33
        command: ['sh', '-c', 'until nc -w 3 -v mysql-aga 3306; do echo waiting for mysql; sleep 2; done;']
      imagePullSecrets:
      - name: registry-secret      
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 101
      terminationGracePeriodSeconds: 100
---
# Source: amplify-apim-7.7/templates/apimgr/apimgr-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: "apimgr"
  name: "apimgr"
  namespace: "apim"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "apimgr"
  strategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: "apimgr"
    spec:
      containers:
      - args:
        - /opt/Axway/apigateway/posix/bin/start-emt-instance
        env:
        - name: GW_DIR
          value: /opt/Axway/apigateway
        - name: GW_TRACE_DIR
          value: /opt/Axway/apigateway/trace/groups/topologylinks/emt-group-emt-service/trace
        - name: CASS_HOST
          value: "cassandra"
        - name: CASS_PORT
          value: "9042"
        - name: CASS_KEYSPACE
          value: apim_demo_1
        - name: CASS_TKEYSPACE
          value: t_apim_demo_1
        - name: CASS_USERNAME
          value: cassandra
        - name: CASS_PASS
          valueFrom:
            secretKeyRef:
              name: apim-password
              key: dbcass
        - name: EMT_ANM_HOSTS
          value: anm:8090
        - name: EMT_TOPOLOGY_TTL
          value: "10"
        - name: EMT_HEAP_SIZE_MB
          value: "1024"
        - name: EMT_TRACE_LEVEL
          value: INFO
        - name: APIGW_LOG_TRACE_TO_FILE
          value: "true"
        - name: APIGW_LOG_TRACE_JSON_TO_STDOUT
          value: "false"
        - name: APIGW_LOG_OPENTRAFFIC_OUTPUT
          value: "stdout"
        - name: METRICS_DB_URL
          value: jdbc:mysql://mysql-aga:3306/analytics?useSSL=false
        - name: METRICS_DB_USERNAME
          value: report
        - name: METRICS_DB_PASS
          valueFrom:
            secretKeyRef:
              name: apim-password
              key: dbmysqlanalytics
        - name: EMT_DEPLOYMENT_ENABLED
          value: "true"
        image: 172.30.1.1:5000/apim/apim-gtw-7.7:20210130
        imagePullPolicy: "Always"
        name: "apimgr"
        ports:
        - containerPort: 8075
          protocol: TCP
        resources: {}
        readinessProbe:
          httpGet:
            httpHeaders:
            - name: k8sprobe
              value: readiness.apimgr
            path: /healthcheck
            port: 8075
            scheme: HTTPS
          initialDelaySeconds: 50
          periodSeconds: 15
          failureThreshold: 10
        livenessProbe:
          httpGet:
            httpHeaders:
            - name: k8sprobe
              value: liveness.apimgr
            path: /healthcheck
            port: 8075
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 30
          failureThreshold: 5
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - mountPath: "/opt/Axway/apigateway/events"
          name: events
        lifecycle:
          preStop:
            exec:
              command: ["sleep","90"]
      initContainers:
      - name: init-cassandra
        image: busybox:1.33
        command: ['sh', '-c', 'until nc -w 3 -v cassandra 9042; do echo waiting for cassandra-0; sleep 2; done;']
      - name: init-mysql
        image: busybox:1.33
        command: ['sh', '-c', 'until nc -w 3 -v mysql-aga 3306; do echo waiting for mysql; sleep 2; done;']
      - name: init-anm
        image: busybox:1.33
        command: ['sh', '-c', 'until nc -w 3 -v anm 8090; do echo waiting for anm; sleep 2; done;']
      imagePullSecrets:
      - name: registry-secret      
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 101
      volumes:
      - name: events
        persistentVolumeClaim:
          claimName: apigw-events
      terminationGracePeriodSeconds: 100
---
# Source: amplify-apim-7.7/templates/apitraffic/apitraffic-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: traffic
  name: traffic
  namespace: "apim" 
spec:
  replicas: 1
  selector:
    matchLabels:
      app: traffic
  template:
    metadata:
      labels:
        app: traffic
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - traffic
              topologyKey: kubernetes.io/hostname
      imagePullSecrets:
      - name: registry-secret
      containers:
      - args:
        - /opt/Axway/apigateway/posix/bin/start-emt-instance
        env:
        - name: GW_DIR
          value: /opt/Axway/apigateway
        - name: GW_TRACE_DIR
          value: /opt/Axway/apigateway/groups/topologylinks/emt-group-emt-service/trace
        - name: CASS_HOST
          value: cassandra
        - name: CASS_PORT
          value: "9042"
        - name: CASS_KEYSPACE
          value: apim_demo_1
        - name: CASS_TKEYSPACE
          value: t_apim_demo_1
        - name: CASS_USERNAME
          value: cassandra
        - name: CASS_PASS
          valueFrom:
            secretKeyRef:
              name: apim-password
              key: dbcass
        - name: EMT_ANM_HOSTS
          value: anm:8090
        - name: EMT_TOPOLOGY_TTL
          value: "10"
        - name: EMT_HEAP_SIZE_MB
          value: "1512"
        - name: EMT_TRACE_LEVEL
          value: INFO
        - name: APIGW_LOG_TRACE_TO_FILE
          value: "true"
        - name: APIGW_LOG_TRACE_JSON_TO_STDOUT
          value: "false"
        - name: APIGW_LOG_OPENTRAFFIC_OUTPUT
          value: "stdout"
        - name: EMT_DEPLOYMENT_ENABLED
          value: "true"
        - name: METRICS_DB_URL
          value: jdbc:mysql://mysql-aga:3306/analytics?useSSL=false
        - name: METRICS_DB_USERNAME
          value: report
        - name: METRICS_DB_PASS
          valueFrom:
            secretKeyRef:
              name: apim-password
              key: dbmysqlanalytics
        image: 172.30.1.1:5000/apim/apim-gtw-7.7:20210130 
        imagePullPolicy: Always 
        name: traffic
        volumeMounts:
        - mountPath: "/opt/Axway/apigateway/events"
          name: events
        ports:
        - containerPort: 8065
          protocol: TCP
        - containerPort: 8080
          protocol: TCP
        - containerPort: 8081
          protocol: TCP
        resources:
          limits:
            memory: "2Gi"
            cpu: 2
          requests:
            memory: "0.5Gi"
            cpu: 0.5
        readinessProbe:
          httpGet:
            httpHeaders:
            - name: k8sprobe
              value: readiness.traffic
            path: /healthcheck
            port: 8065
            scheme: HTTPS
          initialDelaySeconds: 40
          periodSeconds: 30
          failureThreshold: 5
        livenessProbe:
          httpGet:
            httpHeaders:
            - name: k8sprobe
              value: liveness.traffic
            path: /healthcheck
            port: 8065
            scheme: HTTPS
          initialDelaySeconds: 30
          periodSeconds: 30
          failureThreshold: 5
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        lifecycle:
          preStop:
            exec:
              command: ["/bin/bash", "-c", "sleep 90"]
      initContainers:
      - name: init-cassandra
        image: busybox:1.33
        command: ['sh', '-c', 'until nc -w 3 -v cassandra 9042; do echo waiting for cassandra; sleep 60; done;']
      - name: init-dbanalytics
        image: busybox:1.33
        command: ['sh', '-c', 'until nc -w 3 -v mysql-aga 3306; do echo waiting for mysql; sleep 2; done;']
      - name: init-anm
        image: busybox:1.33
        command: ['sh', '-c', 'until nc -w 3 -v anm 8090; do echo waiting for anm; sleep 2; done;']
      - name: init-apimanager
        image: busybox:1.33
        command: ['sh', '-c', 'until nc -w 3 -v apimgr 8075; do echo waiting for mgmt; sleep 2; done;']
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      volumes:
      - name: events
        persistentVolumeClaim:
          claimName: apigw-events
      terminationGracePeriodSeconds: 100
      terminationGracePeriodSeconds: 100
  strategy:
    type: RollingUpdate
---
# Source: amplify-apim-7.7/templates/mysqlAnalytics/mysql-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-aga
  namespace: "apim" 
spec:
  replicas: 1
  selector:
    matchLabels:
       app: mysql-aga
  strategy: 
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql-aga
    spec:
      containers:
      - image: mysql:5.7.26
        name: mysql-aga
        args:
        - "--ignore-db-dir=lost+found"        
        env:
        - name: MYSQL_DATABASE
          value: analytics
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: apim-password
              key: dbmysqlroot
        - name: MYSQL_USER
          value: report
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: apim-password
              key: dbmysqlanalytics
        imagePullPolicy: Always 
        ports:
        - containerPort: 3306
          protocol: TCP
          name: mysql-aga
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-analytics-pvc
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
---
# Source: amplify-apim-7.7/templates/cassandra/cassandra-statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: cassandra
  namespace: "apim"
  labels:
    app: cassandra
spec:
  serviceName: cassandra
  replicas: 1
  selector:
    matchLabels:
      app: cassandra
  template:
    metadata:
      labels:
        app: cassandra
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - cassandra
              topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 1800
      containers:
      - name: cassandra
        image: cassandra:2.2.12
        imagePullPolicy: Always
        ports:
        - containerPort: 7000
          name: intra-node
        - containerPort: 7001
          name: tls-intra-node
        - containerPort: 7199
          name: jmx
        - containerPort: 9042
          name: cql
        resources:
          limits:
            cpu: "1000m"
            memory: 2Gi
          requests:
            cpu: "500m"
            memory: 1Gi
        lifecycle:
          preStop:
            exec:
              command: 
              - /bin/sh
              - -c
              - nodetool drain
        env:
          - name: MAX_HEAP_SIZE
            value: 1024M
          - name: HEAP_NEWSIZE
            value: 512M
          - name: CASSANDRA_CLUSTER_NAME
            value: cassandra
          - name: CASSANDRA_DC
            value: "DC1-APIM"
          - name: CASSANDRA_RACK
            value: "Rack1-APIM"
          - name: CASSANDRA_AUTO_BOOTSTRAP
            value: "false"
          - name: CASSANDRA_ENDPOINT_SNITCH
            value: GossipingPropertyFileSnitch
          - name: CASSANDRA_USER
            value: cassandra
          - name: CASSANDRA_PASSWORD_SEEDER
            value: "yes"
          - name: CASSANDRA_PASSWORD
            valueFrom:
              secretKeyRef:
                name: apim-password
                key: dbcass
        volumeMounts:
        - name: cassandra-data
          mountPath: /var/lib/cassandra/data
          # mountPath: /cassandra_data
  volumeClaimTemplates:
  - metadata:
      name: cassandra-data
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 2Gi
---
# Source: amplify-apim-7.7/templates/mysqlAnalytics/db-create.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: db-create-mysql-apigw-ed46fa01-23f2-45e3-8851-f77f9ba6b7bd
  namespace: "apim"
  labels:  
    heritage: Helm
    release: my-apim
spec:
 template:
  spec:
   containers:
    - name: dbcreate-mysql-analytics
      image: mysql:5.7.26
      command: 
      - "sh" 
      - "-c" 
      args:
      - "SQL_COMMANDS=$(cat /tmp/mysql/analytics.sql); mysql -u$(METRICS_DB_USERNAME) -p$(METRICS_DB_PASS) $(MYSQL_DBNAME) -h $(MYSQL_HOST) -e \"${SQL_COMMANDS} \""
      env:
      - name: MYSQL_HOST
        value: mysql-aga
      - name: MYSQL_PORT
        value: "3306"
      - name: METRICS_DB_USERNAME
        value: report
      - name: METRICS_DB_PASS
        valueFrom:
          secretKeyRef:
            name: apim-password
            key: dbmysqlanalytics
      - name: MYSQL_DBNAME
        value: analytics
      volumeMounts:
      - name: config-volume
        mountPath: /tmp/mysql
   initContainers:
   - name: init-mysql
     image: busybox:1.33
     command: ['sh', '-c', 'until nc -w 3 -v mysql-aga 3306; do echo waiting for mysql; sleep 2; done;']
   volumes:
    - name: config-volume
      configMap:
        # Provide the name of the ConfigMap containing the files you want
        # to add to the container
        name: analytics
   restartPolicy: Never
---
# Source: amplify-apim-7.7/templates/anm/anm-route.yaml
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: gatewaymanager
spec:
  to:
    kind: Service
    name: anm
  port:
    targetPort: 8090
  tls:
    termination: passthrough
    insecureEdgeTerminationPolicy: Redirect
  wildcardPolicy: None
---
# Source: amplify-apim-7.7/templates/apiaga/apiaga-route.yaml
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: apimanager
spec:
  to:
    kind: Service
    name: apiaga
  port:
    targetPort: 8040
  tls:
    termination: passthrough
    insecureEdgeTerminationPolicy: Redirect
  wildcardPolicy: None
---
# Source: amplify-apim-7.7/templates/apimgr/apimgr-route.yaml
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: apimanager
spec:
  to:
    kind: Service
    name: apimgr
  port:
    targetPort: 8075
  tls:
    termination: passthrough
    insecureEdgeTerminationPolicy: Redirect
  wildcardPolicy: None
---
# Source: amplify-apim-7.7/templates/apitraffic/apitraffic-route.yaml
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: traffic
spec:
  to:
    kind: Service
    name: traffic
  port:
    targetPort: 8065
  tls:
    termination: passthrough
    insecureEdgeTerminationPolicy: Redirect
  wildcardPolicy: None

