apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    apigw.version: {{ .Values.global.apimVersion | quote }}
    apigw.editor: {{ .Values.global.editor | quote }}
  labels:
    app: {{ .Values.anm.name }}
  name: {{ .Values.anm.name }}
  namespace: {{ .Values.global.namespace }}
spec:
  replicas: {{ .Values.anm.replicaCount }}
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
      minReadySeconds: 10
      progressDeadlineSeconds : 140
    type: {{ .Values.global.updateStrategy }}
  template:
    metadata:
      labels:
        app: {{ .Values.anm.name }}
        version: {{ .Values.anm.buildTag }}
    spec:
      containers:
      - name: {{ .Values.anm.name }}
        image: {{ .Values.global.dockerRegistries.apimName }}/{{ .Values.anm.imageName }}:{{ .Values.anm.buildTag }}
        imagePullPolicy: {{ .Values.global.pullPolicy }}
        env:
        - name: METRICS_DB_URL
          value: jdbc:mysql://{{ .Values.mysqlAnalytics.name }}:{{ .Values.mysqlAnalytics.port }}/{{ .Values.mysqlAnalytics.dbName }}?useSSL=false
        - name: METRICS_DB_USERNAME
          value: {{ .Values.mysqlAnalytics.adminUser }}
        - name: METRICS_DB_PASS
          valueFrom:
            secretKeyRef:
              name: apim-password
              key: dbmysqlanalytics
        args:
          - /opt/Axway/apigateway/posix/bin/start-emt-nodemanager
        ports:
        - containerPort: {{ .Values.anm.trafficPort }}
          protocol: TCP
        resources:
          limits:
            memory: "2048Mi"
            cpu: "1000m"
          requests:
            memory: "1Gi"
            cpu: "250m"
        volumeMounts:
        - name: events
          mountPath: {{ .Values.apitraffic.share.path | quote }}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        resources: {}
      imagePullSecrets:
      - name: {{ .Values.global.dockerRegistries.apimSecret }}
      initContainers:
      - name: init-mysql
        image: {{ .Values.global.initImageTag }}
        command: ['sh', '-c', 'until nc -w 3 -v {{ .Values.mysqlAnalytics.name }} 3306; do echo waiting for mysql; sleep 2; done;']
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      volumes:
      - name: events
        azureFile:
           secretName: {{ .Values.apitraffic.share.secret | quote }}
           shareName: {{ .Values.apitraffic.share.name | quote }}
           readOnly: false
status: {}